
GameProject_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f10  08005f10  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f18  08005f18  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08005f30  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08005f90  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000057c  240000d0  08005ff0  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400064c  08005ff0  0002064c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002365f  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003439  00000000  00000000  0004375d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00046b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f20  00000000  00000000  00047ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a2e4  00000000  00000000  00048ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001466d  00000000  00000000  00082da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001801fa  00000000  00000000  00097411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0021760b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043d0  00000000  00000000  00217660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005ec0 	.word	0x08005ec0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005ec0 	.word	0x08005ec0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x98>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f985 	bl	8000a3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fbb3 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f833 	bl	80007a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <main+0x98>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a16      	ldr	r2, [pc, #88]	; (800079c <main+0x98>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <main+0x98>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 fb1f 	bl	8001d9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 fb35 	bl	8001dd0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0x98>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f957 	bl	8000a3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 800078e:	f000 f88b 	bl	80008a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8d5 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f91f 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x96>
 800079c:	58024400 	.word	0x58024400

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	224c      	movs	r2, #76	; 0x4c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 fb7e 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fb78 	bl	8005eb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f001 fc61 	bl	8002088 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <SystemClock_Config+0xfc>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a33      	ldr	r2, [pc, #204]	; (800089c <SystemClock_Config+0xfc>)
 80007d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <SystemClock_Config+0xfc>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <SystemClock_Config+0x100>)
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <SystemClock_Config+0x100>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <SystemClock_Config+0x100>)
 80007ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f8:	bf00      	nop
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xfc>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000806:	d1f8      	bne.n	80007fa <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <SystemClock_Config+0x104>)
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	f023 0303 	bic.w	r3, r3, #3
 8000810:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <SystemClock_Config+0x104>)
 8000812:	f043 0302 	orr.w	r3, r3, #2
 8000816:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	2302      	movs	r3, #2
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800082e:	2378      	movs	r3, #120	; 0x78
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800083e:	230c      	movs	r3, #12
 8000840:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000842:	2300      	movs	r3, #0
 8000844:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fc84 	bl	800215c <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800085a:	f000 f8ef 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	233f      	movs	r3, #63	; 0x3f
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086a:	2308      	movs	r3, #8
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f002 f895 	bl	80029b4 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000890:	f000 f8d4 	bl	8000a3c <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3770      	adds	r7, #112	; 0x70
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	58024800 	.word	0x58024800
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024400 	.word	0x58024400

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ETH_Init+0x80>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ETH_Init+0x88>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x88>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ETH_Init+0x80>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_ETH_Init+0x88>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x80>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x80>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x8c>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x80>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x90>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x80>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x80>)
 80008f8:	f000 fc8a 	bl	8001210 <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 f89b 	bl	8000a3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x94>)
 800090c:	f005 fad0 	bl	8005eb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ETH_Init+0x94>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_ETH_Init+0x94>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_ETH_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400058c 	.word	0x2400058c
 800092c:	40028000 	.word	0x40028000
 8000930:	240000ec 	.word	0x240000ec
 8000934:	24000070 	.word	0x24000070
 8000938:	24000010 	.word	0x24000010
 800093c:	24000614 	.word	0x24000614

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_USART3_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800098a:	f003 ff01 	bl	8004790 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f852 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800099c:	f004 fe96 	bl	80056cc <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f849 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f004 fecb 	bl	8005748 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f840 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 80009be:	f004 fe4c 	bl	800565a <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f838 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	240000f4 	.word	0x240000f4
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2209      	movs	r2, #9
 80009e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	f001 f9ea 	bl	8001df8 <HAL_PCD_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a2a:	f000 f807 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000184 	.word	0x24000184
 8000a38:	40080000 	.word	0x40080000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_ETH_MspInit+0x184>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f040 80ab 	bne.w	8000bf6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000aa0:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa6:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae2:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b72:	2332      	movs	r3, #50	; 0x32
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <HAL_ETH_MspInit+0x18c>)
 8000b8e:	f000 ff55 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b92:	2386      	movs	r3, #134	; 0x86
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <HAL_ETH_MspInit+0x190>)
 8000bae:	f000 ff45 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_ETH_MspInit+0x194>)
 8000bd0:	f000 ff34 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <HAL_ETH_MspInit+0x198>)
 8000bf2:	f000 ff23 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40028000 	.word	0x40028000
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021800 	.word	0x58021800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b8      	sub	sp, #224	; 0xe0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22bc      	movs	r2, #188	; 0xbc
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f939 	bl	8005eb0 <memset>
  if(huart->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fa38 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff feeb 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
 8000cca:	f000 feb7 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37e0      	adds	r7, #224	; 0xe0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b8      	sub	sp, #224	; 0xe0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22bc      	movs	r2, #188	; 0xbc
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 f8d3 	bl	8005eb0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <HAL_PCD_MspInit+0x104>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d165      	bne.n	8000de0 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000d1e:	2318      	movs	r3, #24
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 f9c1 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000d50:	f7ff fe74 	bl	8000a3c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d54:	f001 f9f2 	bl	800213c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d90:	230a      	movs	r3, #10
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4814      	ldr	r0, [pc, #80]	; (8000df0 <HAL_PCD_MspInit+0x10c>)
 8000d9e:	f000 fe4d 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_PCD_MspInit+0x10c>)
 8000dbe:	f000 fe3d 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	37e0      	adds	r7, #224	; 0xe0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40080000 	.word	0x40080000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020000 	.word	0x58020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f89e 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff fbc0 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f004 fff7 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc43 	bl	8000704 <main>
  bx  lr
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e88:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e8c:	08005f20 	.word	0x08005f20
  ldr r2, =_sbss
 8000e90:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000e94:	2400064c 	.word	0x2400064c

08000e98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC3_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f982 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea8:	f001 ff3a 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <HAL_Init+0x6c>)
 8000eba:	5ccb      	ldrb	r3, [r1, r3]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_Init+0x68>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_Init+0x6c>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x70>)
 8000ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_Init+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f814 	bl	8000f14 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e002      	b.n	8000efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fda7 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	08005ed8 	.word	0x08005ed8
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	24000000 	.word	0x24000000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_InitTick+0x64>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f959 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f931 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x68>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400000c 	.word	0x2400000c
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	24000008 	.word	0x24000008

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c
 8000fa4:	24000648 	.word	0x24000648

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	24000648 	.word	0x24000648

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2400000c 	.word	0x2400000c

08001008 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetREVID+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0c1b      	lsrs	r3, r3, #16
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	5c001000 	.word	0x5c001000

08001020 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	58000400 	.word	0x58000400

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	4313      	orrs	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	05fa0000 	.word	0x05fa0000

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff5e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff90 	bl	8001100 <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5f 	bl	80010ac <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb2 	bl	8001168 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0c6      	b.n	80013b0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fc26 	bl	8000a7c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2223      	movs	r2, #35	; 0x23
 8001234:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_ETH_Init+0x1a8>)
 8001238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800123c:	4a5e      	ldr	r2, [pc, #376]	; (80013b8 <HAL_ETH_Init+0x1a8>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HAL_ETH_Init+0x1a8>)
 8001248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7a1b      	ldrb	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d103      	bne.n	8001264 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fedf 	bl	8001020 <HAL_SYSCFG_ETHInterfaceSelect>
 8001262:	e003      	b.n	800126c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001264:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001268:	f7ff feda 	bl	8001020 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff fe90 	bl	8000fa8 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800128a:	e00f      	b.n	80012ac <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800128c:	f7ff fe8c 	bl	8000fa8 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129a:	d907      	bls.n	80012ac <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	22e0      	movs	r2, #224	; 0xe0
 80012a6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e081      	b.n	80013b0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e6      	bne.n	800128c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fac0 	bl	8001844 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012c4:	f001 fea6 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a3c      	ldr	r2, [pc, #240]	; (80013bc <HAL_ETH_Init+0x1ac>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3a01      	subs	r2, #1
 80012d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa13 	bl	8001708 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012fc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	22e0      	movs	r2, #224	; 0xe0
 8001314:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e04a      	b.n	80013b0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_ETH_Init+0x1b0>)
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6952      	ldr	r2, [r2, #20]
 800132e:	0052      	lsls	r2, r2, #1
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	6809      	ldr	r1, [r1, #0]
 8001334:	431a      	orrs	r2, r3
 8001336:	f241 1308 	movw	r3, #4360	; 0x1108
 800133a:	440b      	add	r3, r1
 800133c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fad8 	bl	80018f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fb1c 	bl	8001982 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	3305      	adds	r3, #5
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	021a      	lsls	r2, r3, #8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	3303      	adds	r3, #3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061a      	lsls	r2, r3, #24
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001388:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001396:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001398:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2210      	movs	r2, #16
 80013a6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2210      	movs	r2, #16
 80013ac:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	ffff8001 	.word	0xffff8001

080013c4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80013d6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80013de:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	7b1b      	ldrb	r3, [r3, #12]
 80013e4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013e6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7b5b      	ldrb	r3, [r3, #13]
 80013ec:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013ee:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	7b9b      	ldrb	r3, [r3, #14]
 80013f4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7bdb      	ldrb	r3, [r3, #15]
 80013fc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013fe:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	7c12      	ldrb	r2, [r2, #16]
 8001404:	2a00      	cmp	r2, #0
 8001406:	d102      	bne.n	800140e <ETH_SetMACConfig+0x4a>
 8001408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800140c:	e000      	b.n	8001410 <ETH_SetMACConfig+0x4c>
 800140e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001410:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	7c52      	ldrb	r2, [r2, #17]
 8001416:	2a00      	cmp	r2, #0
 8001418:	d102      	bne.n	8001420 <ETH_SetMACConfig+0x5c>
 800141a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800141e:	e000      	b.n	8001422 <ETH_SetMACConfig+0x5e>
 8001420:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001422:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7c9b      	ldrb	r3, [r3, #18]
 8001428:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800142a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001430:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001436:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800143e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	7f5b      	ldrb	r3, [r3, #29]
 8001444:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001446:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	7f92      	ldrb	r2, [r2, #30]
 800144c:	2a00      	cmp	r2, #0
 800144e:	d102      	bne.n	8001456 <ETH_SetMACConfig+0x92>
 8001450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001454:	e000      	b.n	8001458 <ETH_SetMACConfig+0x94>
 8001456:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001458:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7fdb      	ldrb	r3, [r3, #31]
 800145e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001460:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001468:	2a00      	cmp	r2, #0
 800146a:	d102      	bne.n	8001472 <ETH_SetMACConfig+0xae>
 800146c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0xb0>
 8001472:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001474:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800147a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001482:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001484:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <ETH_SetMACConfig+0x22c>)
 8001496:	4013      	ands	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	430b      	orrs	r3, r1
 80014a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80014ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014c2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014c4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d102      	bne.n	80014d6 <ETH_SetMACConfig+0x112>
 80014d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d4:	e000      	b.n	80014d8 <ETH_SetMACConfig+0x114>
 80014d6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014d8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <ETH_SetMACConfig+0x230>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	68f9      	ldr	r1, [r7, #12]
 80014f2:	430b      	orrs	r3, r1
 80014f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <ETH_SetMACConfig+0x234>)
 800150e:	4013      	ands	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	430b      	orrs	r3, r1
 8001518:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001520:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001526:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800152e:	2a00      	cmp	r2, #0
 8001530:	d101      	bne.n	8001536 <ETH_SetMACConfig+0x172>
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	e000      	b.n	8001538 <ETH_SetMACConfig+0x174>
 8001536:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001538:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001540:	4313      	orrs	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800154a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	430b      	orrs	r3, r1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001560:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001568:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	f023 0103 	bic.w	r1, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	430a      	orrs	r2, r1
 8001582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800158e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d101      	bne.n	80015b2 <ETH_SetMACConfig+0x1ee>
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x1f0>
 80015b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80015b4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80015bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015be:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80015c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80015d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	430a      	orrs	r2, r1
 80015e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	00048083 	.word	0x00048083
 80015f4:	c0f88000 	.word	0xc0f88000
 80015f8:	fffffef0 	.word	0xfffffef0

080015fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <ETH_SetDMAConfig+0xf8>)
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	6809      	ldr	r1, [r1, #0]
 800161c:	431a      	orrs	r2, r3
 800161e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001622:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800162e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001642:	4413      	add	r3, r2
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <ETH_SetDMAConfig+0xfc>)
 8001648:	4013      	ands	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	431a      	orrs	r2, r3
 8001652:	f241 0304 	movw	r3, #4100	; 0x1004
 8001656:	440b      	add	r3, r1
 8001658:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	7b5b      	ldrb	r3, [r3, #13]
 800165e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <ETH_SetDMAConfig+0x100>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6811      	ldr	r1, [r2, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	431a      	orrs	r2, r3
 800167e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001682:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7d1b      	ldrb	r3, [r3, #20]
 800168c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800168e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7f5b      	ldrb	r3, [r3, #29]
 8001694:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001696:	4313      	orrs	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f241 1304 	movw	r3, #4356	; 0x1104
 80016a2:	4413      	add	r3, r2
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <ETH_SetDMAConfig+0x104>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6811      	ldr	r1, [r2, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80016b6:	440b      	add	r3, r1
 80016b8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	7f1b      	ldrb	r3, [r3, #28]
 80016be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80016d0:	4413      	add	r3, r2
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <ETH_SetDMAConfig+0x108>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6811      	ldr	r1, [r2, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	431a      	orrs	r2, r3
 80016e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80016e4:	440b      	add	r3, r1
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	ffff87fd 	.word	0xffff87fd
 80016f8:	ffff2ffe 	.word	0xffff2ffe
 80016fc:	fffec000 	.word	0xfffec000
 8001700:	ffc0efef 	.word	0xffc0efef
 8001704:	7fc0ffff 	.word	0x7fc0ffff

08001708 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0a4      	sub	sp, #144	; 0x90
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001716:	2300      	movs	r3, #0
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800172c:	2301      	movs	r3, #1
 800172e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001732:	2301      	movs	r3, #1
 8001734:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001750:	2300      	movs	r3, #0
 8001752:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001760:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001764:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001770:	2301      	movs	r3, #1
 8001772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001782:	2300      	movs	r3, #0
 8001784:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001786:	2300      	movs	r3, #0
 8001788:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800178a:	2300      	movs	r3, #0
 800178c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80017a0:	2320      	movs	r3, #32
 80017a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80017b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80017e2:	2300      	movs	r3, #0
 80017e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fde6 	bl	80013c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001816:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800181c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001820:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001828:	f44f 7306 	mov.w	r3, #536	; 0x218
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fee1 	bl	80015fc <ETH_SetDMAConfig>
}
 800183a:	bf00      	nop
 800183c:	3790      	adds	r7, #144	; 0x90
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001854:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800185c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800185e:	f001 fbd9 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8001862:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d908      	bls.n	800187e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d804      	bhi.n	800187e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e027      	b.n	80018ce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d908      	bls.n	8001898 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d204      	bcs.n	8001898 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e01a      	b.n	80018ce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d303      	bcc.n	80018a8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d911      	bls.n	80018cc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d908      	bls.n	80018c2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d804      	bhi.n	80018c2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e005      	b.n	80018ce <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e000      	b.n	80018ce <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	01312cff 	.word	0x01312cff
 80018e4:	02160ebf 	.word	0x02160ebf
 80018e8:	03938700 	.word	0x03938700
 80018ec:	05f5e0ff 	.word	0x05f5e0ff
 80018f0:	08f0d17f 	.word	0x08f0d17f

080018f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e01d      	b.n	800193e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68d9      	ldr	r1, [r3, #12]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	3206      	adds	r2, #6
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d9de      	bls.n	8001902 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001952:	4413      	add	r3, r2
 8001954:	2203      	movs	r2, #3
 8001956:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68d9      	ldr	r1, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f241 1314 	movw	r3, #4372	; 0x1114
 8001964:	4413      	add	r3, r2
 8001966:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e024      	b.n	80019da <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3310      	adds	r3, #16
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d9d7      	bls.n	8001990 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f241 1330 	movw	r3, #4400	; 0x1130
 8001a06:	4413      	add	r3, r2
 8001a08:	2203      	movs	r2, #3
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6919      	ldr	r1, [r3, #16]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f241 131c 	movw	r3, #4380	; 0x111c
 8001a18:	4413      	add	r3, r2
 8001a1a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a2c:	4413      	add	r3, r2
 8001a2e:	6019      	str	r1, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_GPIO_Init+0x234>)
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a4e:	e194      	b.n	8001d7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8186 	beq.w	8001d74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d005      	beq.n	8001a80 <HAL_GPIO_Init+0x44>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d130      	bne.n	8001ae2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 0201 	and.w	r2, r3, #1
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d017      	beq.n	8001b1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d123      	bne.n	8001b72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	69b9      	ldr	r1, [r7, #24]
 8001b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0203 	and.w	r2, r3, #3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80e0 	beq.w	8001d74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0x238>)
 8001bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bba:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_GPIO_Init+0x238>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_GPIO_Init+0x238>)
 8001bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd2:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_GPIO_Init+0x23c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <HAL_GPIO_Init+0x240>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d052      	beq.n	8001ca4 <HAL_GPIO_Init+0x268>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_GPIO_Init+0x244>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_GPIO_Init+0x248>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x22a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_GPIO_Init+0x24c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_GPIO_Init+0x250>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <HAL_GPIO_Init+0x254>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_GPIO_Init+0x258>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x25c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x260>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_GPIO_Init+0x264>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e02d      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e02b      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e029      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e027      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e025      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e023      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e021      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e01f      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e01d      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e01b      	b.n	8001ca6 <HAL_GPIO_Init+0x26a>
 8001c6e:	bf00      	nop
 8001c70:	58000080 	.word	0x58000080
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58000400 	.word	0x58000400
 8001c7c:	58020000 	.word	0x58020000
 8001c80:	58020400 	.word	0x58020400
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020c00 	.word	0x58020c00
 8001c8c:	58021000 	.word	0x58021000
 8001c90:	58021400 	.word	0x58021400
 8001c94:	58021800 	.word	0x58021800
 8001c98:	58021c00 	.word	0x58021c00
 8001c9c:	58022000 	.word	0x58022000
 8001ca0:	58022400 	.word	0x58022400
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb6:	4938      	ldr	r1, [pc, #224]	; (8001d98 <HAL_GPIO_Init+0x35c>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3301      	adds	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f ae63 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	58000400 	.word	0x58000400

08001d9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001da4:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_HSEM_FastTake+0x2c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3320      	adds	r3, #32
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_HSEM_FastTake+0x30>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	58026400 	.word	0x58026400
 8001dcc:	80000300 	.word	0x80000300

08001dd0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001dda:	4906      	ldr	r1, [pc, #24]	; (8001df4 <HAL_HSEM_Release+0x24>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	58026400 	.word	0x58026400

08001df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b08f      	sub	sp, #60	; 0x3c
 8001dfc:	af0a      	add	r7, sp, #40	; 0x28
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e116      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe ff5d 	bl	8000ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fd77 	bl	800593c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	687e      	ldr	r6, [r7, #4]
 8001e56:	466d      	mov	r5, sp
 8001e58:	f106 0410 	add.w	r4, r6, #16
 8001e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e6c:	1d33      	adds	r3, r6, #4
 8001e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f003 fcf5 	bl	8005860 <USB_CoreInit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d7      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fd65 	bl	800595e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e04a      	b.n	8001f30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333d      	adds	r3, #61	; 0x3d
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	333c      	adds	r3, #60	; 0x3c
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b298      	uxth	r0, r3
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333f      	adds	r3, #63	; 0x3f
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3344      	adds	r3, #68	; 0x44
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3348      	adds	r3, #72	; 0x48
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3af      	bcc.n	8001e9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e044      	b.n	8001fca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3b5      	bcc.n	8001f40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	687e      	ldr	r6, [r7, #4]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0410 	add.w	r4, r6, #16
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff2:	1d33      	adds	r3, r6, #4
 8001ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f003 fcfe 	bl	80059f8 <USB_DevInit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e014      	b.n	8002038 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f80a 	bl	8002040 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 feb8 	bl	8005da6 <USB_DevDisconnect>

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002040 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_PCDEx_ActivateLPM+0x44>)
 8002070:	4313      	orrs	r3, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	10000003 	.word	0x10000003

08002088 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	2b06      	cmp	r3, #6
 800209a:	d00a      	beq.n	80020b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e040      	b.n	8002130 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e03e      	b.n	8002130 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80020ba:	491f      	ldr	r1, [pc, #124]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020c2:	f7fe ff71 	bl	8000fa8 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020c8:	e009      	b.n	80020de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020ca:	f7fe ff6d 	bl	8000fa8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d8:	d901      	bls.n	80020de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e028      	b.n	8002130 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ea:	d1ee      	bne.n	80020ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b1e      	cmp	r3, #30
 80020f0:	d008      	beq.n	8002104 <HAL_PWREx_ConfigSupply+0x7c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b2e      	cmp	r3, #46	; 0x2e
 80020f6:	d005      	beq.n	8002104 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b1d      	cmp	r3, #29
 80020fc:	d002      	beq.n	8002104 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b2d      	cmp	r3, #45	; 0x2d
 8002102:	d114      	bne.n	800212e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002104:	f7fe ff50 	bl	8000fa8 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800210a:	e009      	b.n	8002120 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800210c:	f7fe ff4c 	bl	8000fa8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211a:	d901      	bls.n	8002120 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_PWREx_ConfigSupply+0xb0>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d1ee      	bne.n	800210c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	58024800 	.word	0x58024800

0800213c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	58024800 	.word	0x58024800

0800215c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f000 bc1c 	b.w	80029a8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8087 	beq.w	800228c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002188:	4b9b      	ldr	r3, [pc, #620]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b10      	cmp	r3, #16
 8002192:	d007      	beq.n	80021a4 <HAL_RCC_OscConfig+0x48>
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	2b18      	cmp	r3, #24
 8002198:	d110      	bne.n	80021bc <HAL_RCC_OscConfig+0x60>
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06c      	beq.n	800228a <HAL_RCC_OscConfig+0x12e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d168      	bne.n	800228a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e3f5      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x78>
 80021c6:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8b      	ldr	r2, [pc, #556]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e02e      	b.n	8002232 <HAL_RCC_OscConfig+0xd6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x9a>
 80021dc:	4b86      	ldr	r3, [pc, #536]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a85      	ldr	r2, [pc, #532]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a82      	ldr	r2, [pc, #520]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e01d      	b.n	8002232 <HAL_RCC_OscConfig+0xd6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0xbe>
 8002200:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a79      	ldr	r2, [pc, #484]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0xd6>
 800221a:	4b77      	ldr	r3, [pc, #476]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a76      	ldr	r2, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d013      	beq.n	8002262 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe feb5 	bl	8000fa8 <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002242:	f7fe feb1 	bl	8000fa8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e3a9      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002254:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0xe6>
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fea1 	bl	8000fa8 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226a:	f7fe fe9d 	bl	8000fa8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	; 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e395      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x10e>
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80ca 	beq.w	800242e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_OscConfig+0x164>
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b18      	cmp	r3, #24
 80022b4:	d156      	bne.n	8002364 <HAL_RCC_OscConfig+0x208>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d151      	bne.n	8002364 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c0:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x17c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e367      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 0219 	bic.w	r2, r3, #25
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4944      	ldr	r1, [pc, #272]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ea:	f7fe fe5d 	bl	8000fa8 <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe59 	bl	8000fa8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e351      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	f7fe fe7a 	bl	8001008 <HAL_GetREVID>
 8002314:	4603      	mov	r3, r0
 8002316:	f241 0203 	movw	r2, #4099	; 0x1003
 800231a:	4293      	cmp	r3, r2
 800231c:	d817      	bhi.n	800234e <HAL_RCC_OscConfig+0x1f2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x1dc>
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002336:	e07a      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	031b      	lsls	r3, r3, #12
 8002346:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234c:	e06f      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	4926      	ldr	r1, [pc, #152]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002362:	e064      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d047      	beq.n	80023fc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 0219 	bic.w	r2, r3, #25
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	491f      	ldr	r1, [pc, #124]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fe13 	bl	8000fa8 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fe0f 	bl	8000fa8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e307      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	f7fe fe30 	bl	8001008 <HAL_GetREVID>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d817      	bhi.n	80023e2 <HAL_RCC_OscConfig+0x286>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x270>
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023c2:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	6053      	str	r3, [r2, #4]
 80023ca:	e030      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	031b      	lsls	r3, r3, #12
 80023da:	4907      	ldr	r1, [pc, #28]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e025      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	061b      	lsls	r3, r3, #24
 80023f0:	4901      	ldr	r1, [pc, #4]	; (80023f8 <HAL_RCC_OscConfig+0x29c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
 80023f6:	e01a      	b.n	800242e <HAL_RCC_OscConfig+0x2d2>
 80023f8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fc:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a9d      	ldr	r2, [pc, #628]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fdce 	bl	8000fa8 <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fdca 	bl	8000fa8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e2c2      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002422:	4b95      	ldr	r3, [pc, #596]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80a9 	beq.w	800258e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243c:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002444:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002446:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d007      	beq.n	8002462 <HAL_RCC_OscConfig+0x306>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b18      	cmp	r3, #24
 8002456:	d13a      	bne.n	80024ce <HAL_RCC_OscConfig+0x372>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d135      	bne.n	80024ce <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002462:	4b85      	ldr	r3, [pc, #532]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x31e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e296      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247a:	f7fe fdc5 	bl	8001008 <HAL_GetREVID>
 800247e:	4603      	mov	r3, r0
 8002480:	f241 0203 	movw	r2, #4099	; 0x1003
 8002484:	4293      	cmp	r3, r2
 8002486:	d817      	bhi.n	80024b8 <HAL_RCC_OscConfig+0x35c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	2b20      	cmp	r3, #32
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_OscConfig+0x346>
 8002490:	4b79      	ldr	r3, [pc, #484]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002498:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 800249a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800249e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a0:	e075      	b.n	800258e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024a2:	4b75      	ldr	r3, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	4971      	ldr	r1, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b6:	e06a      	b.n	800258e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	496c      	ldr	r1, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024cc:	e05f      	b.n	800258e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d042      	beq.n	800255c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024d6:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a67      	ldr	r2, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fd61 	bl	8000fa8 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024ea:	f7fe fd5d 	bl	8000fa8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e255      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002508:	f7fe fd7e 	bl	8001008 <HAL_GetREVID>
 800250c:	4603      	mov	r3, r0
 800250e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002512:	4293      	cmp	r3, r2
 8002514:	d817      	bhi.n	8002546 <HAL_RCC_OscConfig+0x3ea>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2b20      	cmp	r3, #32
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x3d4>
 800251e:	4b56      	ldr	r3, [pc, #344]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002526:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800252c:	6053      	str	r3, [r2, #4]
 800252e:	e02e      	b.n	800258e <HAL_RCC_OscConfig+0x432>
 8002530:	4b51      	ldr	r3, [pc, #324]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	494e      	ldr	r1, [pc, #312]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e023      	b.n	800258e <HAL_RCC_OscConfig+0x432>
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	4948      	ldr	r1, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800255c:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fd1e 	bl	8000fa8 <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002570:	f7fe fd1a 	bl	8000fa8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e212      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fcfb 	bl	8000fa8 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe fcf7 	bl	8000fa8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1ef      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x45a>
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025da:	4a27      	ldr	r2, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe fce1 	bl	8000fa8 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fcdd 	bl	8000fa8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1d5      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d039      	beq.n	8002688 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002628:	f7fe fcbe 	bl	8000fa8 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002630:	f7fe fcba 	bl	8000fa8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1b2      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x4d4>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x51c>)
 8002656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800265a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800265c:	f7fe fca4 	bl	8000fa8 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002664:	f7fe fca0 	bl	8000fa8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d904      	bls.n	800267c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e198      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
 8002676:	bf00      	nop
 8002678:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800267c:	4ba3      	ldr	r3, [pc, #652]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ed      	bne.n	8002664 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8081 	beq.w	8002798 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002696:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x7b4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a9d      	ldr	r2, [pc, #628]	; (8002910 <HAL_RCC_OscConfig+0x7b4>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a2:	f7fe fc81 	bl	8000fa8 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe fc7d 	bl	8000fa8 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e175      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026bc:	4b94      	ldr	r3, [pc, #592]	; (8002910 <HAL_RCC_OscConfig+0x7b4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x582>
 80026d0:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a8d      	ldr	r2, [pc, #564]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e02d      	b.n	800273a <HAL_RCC_OscConfig+0x5de>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x5a4>
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a88      	ldr	r2, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b86      	ldr	r3, [pc, #536]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a85      	ldr	r2, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e01c      	b.n	800273a <HAL_RCC_OscConfig+0x5de>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d10c      	bne.n	8002722 <HAL_RCC_OscConfig+0x5c6>
 8002708:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a7f      	ldr	r2, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	e00b      	b.n	800273a <HAL_RCC_OscConfig+0x5de>
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a79      	ldr	r2, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d015      	beq.n	800276e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fc31 	bl	8000fa8 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fc2d 	bl	8000fa8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e123      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ee      	beq.n	800274a <HAL_RCC_OscConfig+0x5ee>
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fc1b 	bl	8000fa8 <HAL_GetTick>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fc17 	bl	8000fa8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e10d      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800278c:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8102 	beq.w	80029a6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027a2:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027aa:	2b18      	cmp	r3, #24
 80027ac:	f000 80bd 	beq.w	800292a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f040 8095 	bne.w	80028e4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a53      	ldr	r2, [pc, #332]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80027c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fbef 	bl	8000fa8 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fbeb 	bl	8000fa8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0e3      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e0:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80027ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f0:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_RCC_OscConfig+0x7b8>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	430a      	orrs	r2, r1
 8002800:	4942      	ldr	r1, [pc, #264]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	628b      	str	r3, [r1, #40]	; 0x28
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	3b01      	subs	r3, #1
 800280c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	3b01      	subs	r3, #1
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	b29b      	uxth	r3, r3
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	3b01      	subs	r3, #1
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	3b01      	subs	r3, #1
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002836:	4935      	ldr	r1, [pc, #212]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4a32      	ldr	r2, [pc, #200]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002848:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800284a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_RCC_OscConfig+0x7bc>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002854:	00d2      	lsls	r2, r2, #3
 8002856:	492d      	ldr	r1, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	f023 020c 	bic.w	r2, r3, #12
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4928      	ldr	r1, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f023 0202 	bic.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4924      	ldr	r1, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 8002892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 800289e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fb74 	bl	8000fa8 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fb70 	bl	8000fa8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e068      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x768>
 80028e2:	e060      	b.n	80029a6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x7b0>)
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fb5a 	bl	8000fa8 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f6:	e011      	b.n	800291c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fb56 	bl	8000fa8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d90a      	bls.n	800291c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04e      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
 800290a:	bf00      	nop
 800290c:	58024400 	.word	0x58024400
 8002910:	58024800 	.word	0x58024800
 8002914:	fffffc0c 	.word	0xfffffc0c
 8002918:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x854>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e7      	bne.n	80028f8 <HAL_RCC_OscConfig+0x79c>
 8002928:	e03d      	b.n	80029a6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x854>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x854>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b01      	cmp	r3, #1
 800293c:	d031      	beq.n	80029a2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d12a      	bne.n	80029a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d122      	bne.n	80029a2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d11a      	bne.n	80029a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d111      	bne.n	80029a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d108      	bne.n	80029a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0e1b      	lsrs	r3, r3, #24
 8002994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3730      	adds	r7, #48	; 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	58024400 	.word	0x58024400

080029b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e19c      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d910      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b87      	ldr	r3, [pc, #540]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 020f 	bic.w	r2, r3, #15
 80029de:	4985      	ldr	r1, [pc, #532]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b83      	ldr	r3, [pc, #524]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e184      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d908      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a14:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	4975      	ldr	r1, [pc, #468]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d908      	bls.n	8002a54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a42:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	496a      	ldr	r1, [pc, #424]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a70:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	495e      	ldr	r1, [pc, #376]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4953      	ldr	r1, [pc, #332]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d908      	bls.n	8002ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f023 020f 	bic.w	r2, r3, #15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4947      	ldr	r1, [pc, #284]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d055      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002aea:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4940      	ldr	r1, [pc, #256]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b04:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d121      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0f6      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d115      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0ea      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0de      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d6      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fa1f 	bl	8000fa8 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe fa1b 	bl	8000fa8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0be      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d1eb      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d208      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d214      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	4906      	ldr	r1, [pc, #24]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e086      	b.n	8002d02 <HAL_RCC_ClockConfig+0x34e>
 8002bf4:	52002000 	.word	0x52002000
 8002bf8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d208      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c18:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4939      	ldr	r1, [pc, #228]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d208      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	492e      	ldr	r1, [pc, #184]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d208      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4917      	ldr	r1, [pc, #92]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cb4:	f000 f834 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	4912      	ldr	r1, [pc, #72]	; (8002d10 <HAL_RCC_ClockConfig+0x35c>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x358>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_RCC_ClockConfig+0x35c>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x360>)
 8002cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x364>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x368>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f90c 	bl	8000f14 <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	08005ed8 	.word	0x08005ed8
 8002d14:	24000004 	.word	0x24000004
 8002d18:	24000000 	.word	0x24000000
 8002d1c:	24000008 	.word	0x24000008

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d26:	4bb3      	ldr	r3, [pc, #716]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2e:	2b18      	cmp	r3, #24
 8002d30:	f200 8155 	bhi.w	8002fde <HAL_RCC_GetSysClockFreq+0x2be>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002da1 	.word	0x08002da1
 8002d40:	08002fdf 	.word	0x08002fdf
 8002d44:	08002fdf 	.word	0x08002fdf
 8002d48:	08002fdf 	.word	0x08002fdf
 8002d4c:	08002fdf 	.word	0x08002fdf
 8002d50:	08002fdf 	.word	0x08002fdf
 8002d54:	08002fdf 	.word	0x08002fdf
 8002d58:	08002fdf 	.word	0x08002fdf
 8002d5c:	08002dc7 	.word	0x08002dc7
 8002d60:	08002fdf 	.word	0x08002fdf
 8002d64:	08002fdf 	.word	0x08002fdf
 8002d68:	08002fdf 	.word	0x08002fdf
 8002d6c:	08002fdf 	.word	0x08002fdf
 8002d70:	08002fdf 	.word	0x08002fdf
 8002d74:	08002fdf 	.word	0x08002fdf
 8002d78:	08002fdf 	.word	0x08002fdf
 8002d7c:	08002dcd 	.word	0x08002dcd
 8002d80:	08002fdf 	.word	0x08002fdf
 8002d84:	08002fdf 	.word	0x08002fdf
 8002d88:	08002fdf 	.word	0x08002fdf
 8002d8c:	08002fdf 	.word	0x08002fdf
 8002d90:	08002fdf 	.word	0x08002fdf
 8002d94:	08002fdf 	.word	0x08002fdf
 8002d98:	08002fdf 	.word	0x08002fdf
 8002d9c:	08002dd3 	.word	0x08002dd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da0:	4b94      	ldr	r3, [pc, #592]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dac:	4b91      	ldr	r3, [pc, #580]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	4a90      	ldr	r2, [pc, #576]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002dbe:	e111      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dc0:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dc2:	61bb      	str	r3, [r7, #24]
    break;
 8002dc4:	e10e      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002dc6:	4b8d      	ldr	r3, [pc, #564]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dc8:	61bb      	str	r3, [r7, #24]
    break;
 8002dca:	e10b      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002dcc:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dce:	61bb      	str	r3, [r7, #24]
    break;
 8002dd0:	e108      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dd2:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ddc:	4b85      	ldr	r3, [pc, #532]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002df2:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	08db      	lsrs	r3, r3, #3
 8002df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80e1 	beq.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f000 8083 	beq.w	8002f24 <HAL_RCC_GetSysClockFreq+0x204>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f200 80a1 	bhi.w	8002f68 <HAL_RCC_GetSysClockFreq+0x248>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x114>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d056      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e32:	e099      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e34:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02d      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e40:	4b6c      	ldr	r3, [pc, #432]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	4a6b      	ldr	r2, [pc, #428]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	4b62      	ldr	r3, [pc, #392]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e9a:	e087      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ede:	e065      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800300c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef2:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f22:	e043      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003010 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f36:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f66:	e021      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	eddf 6a26 	vldr	s13, [pc, #152]	; 800300c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002faa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	0a5b      	lsrs	r3, r3, #9
 8002fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd0:	ee17 3a90 	vmov	r3, s15
 8002fd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002fd6:	e005      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    break;
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe0:	61bb      	str	r3, [r7, #24]
    break;
 8002fe2:	bf00      	nop
  }

  return sysclockfreq;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	03d09000 	.word	0x03d09000
 8002ffc:	003d0900 	.word	0x003d0900
 8003000:	007a1200 	.word	0x007a1200
 8003004:	46000000 	.word	0x46000000
 8003008:	4c742400 	.word	0x4c742400
 800300c:	4a742400 	.word	0x4a742400
 8003010:	4af42400 	.word	0x4af42400

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800301a:	f7ff fe81 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_GetHCLKFreq+0x50>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490f      	ldr	r1, [pc, #60]	; (8003068 <HAL_RCC_GetHCLKFreq+0x54>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_GetHCLKFreq+0x50>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_GetHCLKFreq+0x54>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <HAL_RCC_GetHCLKFreq+0x58>)
 8003050:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_GetHCLKFreq+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	58024400 	.word	0x58024400
 8003068:	08005ed8 	.word	0x08005ed8
 800306c:	24000004 	.word	0x24000004
 8003070:	24000000 	.word	0x24000000

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003078:	f7ff ffcc 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_RCC_GetPCLK1Freq+0x28>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	58024400 	.word	0x58024400
 800309c:	08005ed8 	.word	0x08005ed8

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030a4:	f7ff ffb6 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	58024400 	.word	0x58024400
 80030c8:	08005ed8 	.word	0x08005ed8

080030cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d8:	2300      	movs	r3, #0
 80030da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f0:	d02a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f6:	d824      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030fc:	d018      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003102:	d81e      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310c:	d007      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800310e:	e018      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003110:	4bab      	ldr	r3, [pc, #684]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	4aaa      	ldr	r2, [pc, #680]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800311c:	e015      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f001 f9cf 	bl	80044c8 <RCCEx_PLL2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3324      	adds	r3, #36	; 0x24
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fa78 	bl	800462c <RCCEx_PLL3_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
      break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003150:	4b9b      	ldr	r3, [pc, #620]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315c:	4998      	ldr	r1, [pc, #608]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	650b      	str	r3, [r1, #80]	; 0x50
 8003162:	e001      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03d      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	2b04      	cmp	r3, #4
 800317a:	d826      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003199 	.word	0x08003199
 8003188:	080031a7 	.word	0x080031a7
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a88      	ldr	r2, [pc, #544]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031a4:	e015      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f98b 	bl	80044c8 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031b6:	e00c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3324      	adds	r3, #36	; 0x24
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fa34 	bl	800462c <RCCEx_PLL3_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
      break;
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	f023 0207 	bic.w	r2, r3, #7
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	4976      	ldr	r1, [pc, #472]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	650b      	str	r3, [r1, #80]	; 0x50
 80031ea:	e001      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d042      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	d02b      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320a:	d825      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800320c:	2bc0      	cmp	r3, #192	; 0xc0
 800320e:	d028      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003210:	2bc0      	cmp	r3, #192	; 0xc0
 8003212:	d821      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d016      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d81d      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d007      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003224:	e018      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003232:	e017      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f944 	bl	80044c8 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003244:	e00e      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3324      	adds	r3, #36	; 0x24
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f9ed 	bl	800462c <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003256:	e005      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      break;
 800325c:	e002      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4952      	ldr	r1, [pc, #328]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	650b      	str	r3, [r1, #80]	; 0x50
 800327c:	e001      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d049      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003298:	d030      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800329a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329e:	d82a      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a4:	d02c      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032aa:	d824      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d018      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80032b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b6:	d81e      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c0:	d007      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032c2:	e018      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c4:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e017      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 f8f5 	bl	80044c8 <RCCEx_PLL2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032e2:	e00e      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f99e 	bl	800462c <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032f4:	e005      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003316:	492a      	ldr	r1, [pc, #168]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	658b      	str	r3, [r1, #88]	; 0x58
 800331c:	e001      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332a:	2b00      	cmp	r3, #0
 800332c:	d04c      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003338:	d030      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800333a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800333e:	d82a      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003340:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003344:	d02c      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003346:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800334a:	d824      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800334c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003350:	d018      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	d81e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003360:	d007      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003362:	e018      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003370:	e017      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f8a5 	bl	80044c8 <RCCEx_PLL2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003382:	e00e      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3324      	adds	r3, #36	; 0x24
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f001 f94e 	bl	800462c <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b6:	4902      	ldr	r1, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	658b      	str	r3, [r1, #88]	; 0x58
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80033be:	bf00      	nop
 80033c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d032      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d01c      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033dc:	2b30      	cmp	r3, #48	; 0x30
 80033de:	d817      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d00c      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d813      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d10f      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4baf      	ldr	r3, [pc, #700]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	4aae      	ldr	r2, [pc, #696]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80033fc:	e00e      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f85f 	bl	80044c8 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003422:	4ba3      	ldr	r3, [pc, #652]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	49a0      	ldr	r1, [pc, #640]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003434:	e001      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d047      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d030      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003454:	d82a      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800345a:	d02c      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800345c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003460:	d824      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	d018      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346c:	d81e      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d007      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003478:	e018      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	4a8c      	ldr	r2, [pc, #560]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003486:	e017      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f81a 	bl	80044c8 <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003498:	e00e      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3324      	adds	r3, #36	; 0x24
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f8c3 	bl	800462c <RCCEx_PLL3_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	4979      	ldr	r1, [pc, #484]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	650b      	str	r3, [r1, #80]	; 0x50
 80034d0:	e001      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d049      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ea:	d02e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d828      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80034f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034f6:	d02a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80034f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034fc:	d822      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80034fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003502:	d026      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003508:	d81c      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800350a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800350e:	d010      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003514:	d816      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01d      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d111      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f000 ffce 	bl	80044c8 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003530:	e012      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3324      	adds	r3, #36	; 0x24
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f877 	bl	800462c <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003542:	e009      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	e006      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800354a:	bf00      	nop
 800354c:	e004      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	4951      	ldr	r1, [pc, #324]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	650b      	str	r3, [r1, #80]	; 0x50
 8003570:	e001      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d04b      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358c:	d02e      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003592:	d828      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d02a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d822      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035a4:	d026      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035aa:	d81c      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b0:	d010      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b6:	d816      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01d      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80035bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c0:	d111      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 ff7d 	bl	80044c8 <RCCEx_PLL2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035d2:	e012      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 f826 	bl	800462c <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035e4:	e009      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ea:	e006      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035ec:	bf00      	nop
 80035ee:	e004      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f0:	bf00      	nop
 80035f2:	e002      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800360e:	4928      	ldr	r1, [pc, #160]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	658b      	str	r3, [r1, #88]	; 0x58
 8003614:	e001      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02f      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362e:	d00e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003634:	d814      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363e:	d10f      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800364c:	e00c      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff37 	bl	80044c8 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	490d      	ldr	r1, [pc, #52]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	650b      	str	r3, [r1, #80]	; 0x50
 8003680:	e001      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d033      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	2b03      	cmp	r3, #3
 8003698:	d81c      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036db 	.word	0x080036db
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036c3 	.word	0x080036c3
 80036ac:	080036db 	.word	0x080036db
 80036b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4bb8      	ldr	r3, [pc, #736]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4ab7      	ldr	r2, [pc, #732]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fefd 	bl	80044c8 <RCCEx_PLL2_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      break;
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80036da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036e2:	4bad      	ldr	r3, [pc, #692]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	49aa      	ldr	r1, [pc, #680]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036f4:	e001      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8086 	beq.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4ba4      	ldr	r3, [pc, #656]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4aa3      	ldr	r2, [pc, #652]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003714:	f7fd fc48 	bl	8000fa8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371a:	e009      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd fc44 	bl	8000fa8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d902      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	75fb      	strb	r3, [r7, #23]
        break;
 800372e:	e005      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003730:	4b9a      	ldr	r3, [pc, #616]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ef      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d166      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003742:	4b95      	ldr	r3, [pc, #596]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003744:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800374c:	4053      	eors	r3, r2
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003756:	4b90      	ldr	r3, [pc, #576]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003760:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a8c      	ldr	r2, [pc, #560]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b8a      	ldr	r3, [pc, #552]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a89      	ldr	r2, [pc, #548]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003778:	4a87      	ldr	r2, [pc, #540]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d115      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd fc0d 	bl	8000fa8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003790:	e00b      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fd fc09 	bl	8000fa8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d902      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	75fb      	strb	r3, [r7, #23]
            break;
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037aa:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ed      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d126      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ca:	d10d      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80037cc:	4b72      	ldr	r3, [pc, #456]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037da:	0919      	lsrs	r1, r3, #4
 80037dc:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80037de:	400b      	ands	r3, r1
 80037e0:	496d      	ldr	r1, [pc, #436]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	610b      	str	r3, [r1, #16]
 80037e6:	e005      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80037e8:	4b6b      	ldr	r3, [pc, #428]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a6a      	ldr	r2, [pc, #424]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037f2:	6113      	str	r3, [r2, #16]
 80037f4:	4b68      	ldr	r3, [pc, #416]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003802:	4965      	ldr	r1, [pc, #404]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	670b      	str	r3, [r1, #112]	; 0x70
 8003808:	e004      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	75bb      	strb	r3, [r7, #22]
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d07e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003824:	2b28      	cmp	r3, #40	; 0x28
 8003826:	d867      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	080038ff 	.word	0x080038ff
 8003834:	080038f9 	.word	0x080038f9
 8003838:	080038f9 	.word	0x080038f9
 800383c:	080038f9 	.word	0x080038f9
 8003840:	080038f9 	.word	0x080038f9
 8003844:	080038f9 	.word	0x080038f9
 8003848:	080038f9 	.word	0x080038f9
 800384c:	080038f9 	.word	0x080038f9
 8003850:	080038d5 	.word	0x080038d5
 8003854:	080038f9 	.word	0x080038f9
 8003858:	080038f9 	.word	0x080038f9
 800385c:	080038f9 	.word	0x080038f9
 8003860:	080038f9 	.word	0x080038f9
 8003864:	080038f9 	.word	0x080038f9
 8003868:	080038f9 	.word	0x080038f9
 800386c:	080038f9 	.word	0x080038f9
 8003870:	080038e7 	.word	0x080038e7
 8003874:	080038f9 	.word	0x080038f9
 8003878:	080038f9 	.word	0x080038f9
 800387c:	080038f9 	.word	0x080038f9
 8003880:	080038f9 	.word	0x080038f9
 8003884:	080038f9 	.word	0x080038f9
 8003888:	080038f9 	.word	0x080038f9
 800388c:	080038f9 	.word	0x080038f9
 8003890:	080038ff 	.word	0x080038ff
 8003894:	080038f9 	.word	0x080038f9
 8003898:	080038f9 	.word	0x080038f9
 800389c:	080038f9 	.word	0x080038f9
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	080038f9 	.word	0x080038f9
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	080038f9 	.word	0x080038f9
 80038b0:	080038ff 	.word	0x080038ff
 80038b4:	080038f9 	.word	0x080038f9
 80038b8:	080038f9 	.word	0x080038f9
 80038bc:	080038f9 	.word	0x080038f9
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	080038ff 	.word	0x080038ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fdf4 	bl	80044c8 <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038e4:	e00c      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3324      	adds	r3, #36	; 0x24
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fe9d 	bl	800462c <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
      break;
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80038fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003912:	4921      	ldr	r1, [pc, #132]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	654b      	str	r3, [r1, #84]	; 0x54
 8003918:	e001      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03e      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	2b05      	cmp	r3, #5
 8003930:	d820      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800397b 	.word	0x0800397b
 800393c:	08003951 	.word	0x08003951
 8003940:	08003963 	.word	0x08003963
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdb6 	bl	80044c8 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003960:	e00c      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3324      	adds	r3, #36	; 0x24
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fe5f 	bl	800462c <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
      break;
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800397a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d110      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398e:	4902      	ldr	r1, [pc, #8]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	654b      	str	r3, [r1, #84]	; 0x54
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
 800399c:	58024800 	.word	0x58024800
 80039a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d039      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d820      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	08003a07 	.word	0x08003a07
 80039c8:	080039dd 	.word	0x080039dd
 80039cc:	080039ef 	.word	0x080039ef
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd70 	bl	80044c8 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3324      	adds	r3, #36	; 0x24
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe19 	bl	800462c <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a0e:	4bb7      	ldr	r3, [pc, #732]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	49b3      	ldr	r1, [pc, #716]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	658b      	str	r3, [r1, #88]	; 0x58
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d04b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3e:	d02e      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a44:	d828      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d02a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d822      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a56:	d026      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a5c:	d81c      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d010      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a68:	d816      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01d      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d111      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fd24 	bl	80044c8 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a84:	e012      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3324      	adds	r3, #36	; 0x24
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fdcd 	bl	800462c <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac0:	498a      	ldr	r1, [pc, #552]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d04b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ade:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae2:	d02e      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003ae4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae8:	d828      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d02a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d822      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003afa:	d026      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b00:	d81c      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d010      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0c:	d816      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01d      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d111      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fcd2 	bl	80044c8 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b28:	e012      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3324      	adds	r3, #36	; 0x24
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fd7b 	bl	800462c <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b42:	bf00      	nop
 8003b44:	e004      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b46:	bf00      	nop
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b64:	4961      	ldr	r1, [pc, #388]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	658b      	str	r3, [r1, #88]	; 0x58
 8003b6a:	e001      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d04b      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b86:	d02e      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003b88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b8c:	d828      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d02a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b98:	d822      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003b9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b9e:	d026      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ba0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ba4:	d81c      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003baa:	d010      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d816      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	d111      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fc80 	bl	80044c8 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bcc:	e012      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3324      	adds	r3, #36	; 0x24
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd29 	bl	800462c <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bde:	e009      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
      break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c08:	4938      	ldr	r1, [pc, #224]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2a:	d10a      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fcfa 	bl	800462c <RCCEx_PLL3_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c50:	4926      	ldr	r1, [pc, #152]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3324      	adds	r3, #36	; 0x24
 8003c72:	2102      	movs	r1, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fcd9 	bl	800462c <RCCEx_PLL3_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d036      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cae:	d01f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb4:	d817      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d009      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fbfd 	bl	80044c8 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cd2:	e00e      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3324      	adds	r3, #36	; 0x24
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fca6 	bl	800462c <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003cec:	58024400 	.word	0x58024400
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf8:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d06:	4990      	ldr	r1, [pc, #576]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0c:	e001      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d033      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d28:	d01c      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d2e:	d816      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d34:	d003      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3a:	d007      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3e:	4b82      	ldr	r3, [pc, #520]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a81      	ldr	r2, [pc, #516]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3324      	adds	r3, #36	; 0x24
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc6a 	bl	800462c <RCCEx_PLL3_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
      break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6c:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7a:	4973      	ldr	r1, [pc, #460]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d029      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d007      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003da0:	e00f      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da2:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fb86 	bl	80044c8 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dce:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	495b      	ldr	r1, [pc, #364]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003de0:	e001      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	; 0x24
 8003df6:	2102      	movs	r1, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fc17 	bl	800462c <RCCEx_PLL3_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d030      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d811      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d013      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d80b      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d106      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a42      	ldr	r2, [pc, #264]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e46:	e007      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6a:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e70:	e001      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	492e      	ldr	r1, [pc, #184]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eae:	4926      	ldr	r1, [pc, #152]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	491e      	ldr	r1, [pc, #120]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ee8:	6113      	str	r3, [r2, #16]
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ef4:	4914      	ldr	r1, [pc, #80]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da08      	bge.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	490e      	ldr	r1, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4906      	ldr	r1, [pc, #24]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f34:	7dbb      	ldrb	r3, [r7, #22]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400

08003f4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f50:	f7ff f860 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	08005ed8 	.word	0x08005ed8

08003f78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f80:	4ba1      	ldr	r3, [pc, #644]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f8a:	4b9f      	ldr	r3, [pc, #636]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	0b1b      	lsrs	r3, r3, #12
 8003f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f96:	4b9c      	ldr	r3, [pc, #624]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003fa2:	4b99      	ldr	r3, [pc, #612]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8111 	beq.w	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d056      	beq.n	8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fe2:	e099      	b.n	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe4:	4b88      	ldr	r3, [pc, #544]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02d      	beq.n	800404c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ff0:	4b85      	ldr	r3, [pc, #532]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	4a84      	ldr	r2, [pc, #528]	; (800420c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a03 	vldr	s12, [r7, #12]
 800402e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800404a:	e087      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800408e:	e065      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040d2:	e043      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800421c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004116:	e021      	b.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a03 	vldr	s12, [r7, #12]
 800413e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800415a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004176:	edd7 6a07 	vldr	s13, [r7, #28]
 800417a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004182:	ee17 2a90 	vmov	r2, s15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b0:	ee17 2a90 	vmov	r2, s15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	0e1b      	lsrs	r3, r3, #24
 80041be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 2a90 	vmov	r2, s15
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	bf00      	nop
 80041fc:	3724      	adds	r7, #36	; 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	03d09000 	.word	0x03d09000
 8004210:	46000000 	.word	0x46000000
 8004214:	4c742400 	.word	0x4c742400
 8004218:	4a742400 	.word	0x4a742400
 800421c:	4af42400 	.word	0x4af42400

08004220 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004228:	4ba1      	ldr	r3, [pc, #644]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004232:	4b9f      	ldr	r3, [pc, #636]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	0d1b      	lsrs	r3, r3, #20
 8004238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800423e:	4b9c      	ldr	r3, [pc, #624]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800424a:	4b99      	ldr	r3, [pc, #612]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8111 	beq.w	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f000 8083 	beq.w	800437c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f200 80a1 	bhi.w	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d056      	beq.n	8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800428a:	e099      	b.n	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800428c:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02d      	beq.n	80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004298:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	4a84      	ldr	r2, [pc, #528]	; (80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b7b      	ldr	r3, [pc, #492]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042f2:	e087      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a03 	vldr	s12, [r7, #12]
 800431a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004336:	e065      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a03 	vldr	s12, [r7, #12]
 800435e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800437a:	e043      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043be:	e021      	b.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004402:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	0a5b      	lsrs	r3, r3, #9
 800440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442a:	ee17 2a90 	vmov	r2, s15
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004432:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800444c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004458:	ee17 2a90 	vmov	r2, s15
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	0e1b      	lsrs	r3, r3, #24
 8004466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800447a:	edd7 6a07 	vldr	s13, [r7, #28]
 800447e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004486:	ee17 2a90 	vmov	r2, s15
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800448e:	e008      	b.n	80044a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
}
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
 80044b4:	03d09000 	.word	0x03d09000
 80044b8:	46000000 	.word	0x46000000
 80044bc:	4c742400 	.word	0x4c742400
 80044c0:	4a742400 	.word	0x4a742400
 80044c4:	4af42400 	.word	0x4af42400

080044c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d101      	bne.n	80044e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e099      	b.n	800461a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044e6:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f2:	f7fc fd59 	bl	8000fa8 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044f8:	e008      	b.n	800450c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044fa:	f7fc fd55 	bl	8000fa8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e086      	b.n	800461a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800450c:	4b45      	ldr	r3, [pc, #276]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	493f      	ldr	r1, [pc, #252]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	628b      	str	r3, [r1, #40]	; 0x28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	3b01      	subs	r3, #1
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	3b01      	subs	r3, #1
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	b29b      	uxth	r3, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	3b01      	subs	r3, #1
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800455c:	4931      	ldr	r1, [pc, #196]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	492d      	ldr	r1, [pc, #180]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f023 0220 	bic.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4928      	ldr	r1, [pc, #160]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 8004594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <RCCEx_PLL2_Config+0x160>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	69d2      	ldr	r2, [r2, #28]
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	4920      	ldr	r1, [pc, #128]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	f043 0310 	orr.w	r3, r3, #16
 80045b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045c4:	e00f      	b.n	80045e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d106      	bne.n	80045da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045d8:	e005      	b.n	80045e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a11      	ldr	r2, [pc, #68]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fcd9 	bl	8000fa8 <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045fa:	f7fc fcd5 	bl	8000fa8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <RCCEx_PLL2_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
 8004628:	ffff0007 	.word	0xffff0007

0800462c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800463a:	4b53      	ldr	r3, [pc, #332]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b03      	cmp	r3, #3
 8004644:	d101      	bne.n	800464a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e099      	b.n	800477e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800464a:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4e      	ldr	r2, [pc, #312]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	f7fc fca7 	bl	8000fa8 <HAL_GetTick>
 800465a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800465c:	e008      	b.n	8004670 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800465e:	f7fc fca3 	bl	8000fa8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e086      	b.n	800477e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004670:	4b45      	ldr	r3, [pc, #276]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	051b      	lsls	r3, r3, #20
 800468a:	493f      	ldr	r1, [pc, #252]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	628b      	str	r3, [r1, #40]	; 0x28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	3b01      	subs	r3, #1
 8004696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	3b01      	subs	r3, #1
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046c0:	4931      	ldr	r1, [pc, #196]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	492d      	ldr	r1, [pc, #180]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	4928      	ldr	r1, [pc, #160]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 80046f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <RCCEx_PLL3_Config+0x160>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	69d2      	ldr	r2, [r2, #28]
 8004702:	00d2      	lsls	r2, r2, #3
 8004704:	4920      	ldr	r1, [pc, #128]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800470a:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004728:	e00f      	b.n	800474a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d106      	bne.n	800473e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004730:	4b15      	ldr	r3, [pc, #84]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800473c:	e005      	b.n	800474a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fc fc27 	bl	8000fa8 <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800475c:	e008      	b.n	8004770 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800475e:	f7fc fc23 	bl	8000fa8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e006      	b.n	800477e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <RCCEx_PLL3_Config+0x15c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	58024400 	.word	0x58024400
 800478c:	ffff0007 	.word	0xffff0007

08004790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e042      	b.n	8004828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fc fa2f 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2224      	movs	r2, #36	; 0x24
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f82c 	bl	8004830 <UART_SetConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fd80 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fe07 	bl	8005434 <UART_CheckIdleState>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4313      	orrs	r3, r2
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4bbf      	ldr	r3, [pc, #764]	; (8004b5c <UART_SetConfig+0x32c>)
 800485e:	4013      	ands	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004866:	430b      	orrs	r3, r1
 8004868:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4ab5      	ldr	r2, [pc, #724]	; (8004b60 <UART_SetConfig+0x330>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004896:	4313      	orrs	r3, r2
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	4bb0      	ldr	r3, [pc, #704]	; (8004b64 <UART_SetConfig+0x334>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	f023 010f 	bic.w	r1, r3, #15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4aa7      	ldr	r2, [pc, #668]	; (8004b68 <UART_SetConfig+0x338>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d176      	bne.n	80049bc <UART_SetConfig+0x18c>
 80048ce:	4ba7      	ldr	r3, [pc, #668]	; (8004b6c <UART_SetConfig+0x33c>)
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d6:	2b28      	cmp	r3, #40	; 0x28
 80048d8:	d86c      	bhi.n	80049b4 <UART_SetConfig+0x184>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0xb0>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004985 	.word	0x08004985
 80048e4:	080049b5 	.word	0x080049b5
 80048e8:	080049b5 	.word	0x080049b5
 80048ec:	080049b5 	.word	0x080049b5
 80048f0:	080049b5 	.word	0x080049b5
 80048f4:	080049b5 	.word	0x080049b5
 80048f8:	080049b5 	.word	0x080049b5
 80048fc:	080049b5 	.word	0x080049b5
 8004900:	0800498d 	.word	0x0800498d
 8004904:	080049b5 	.word	0x080049b5
 8004908:	080049b5 	.word	0x080049b5
 800490c:	080049b5 	.word	0x080049b5
 8004910:	080049b5 	.word	0x080049b5
 8004914:	080049b5 	.word	0x080049b5
 8004918:	080049b5 	.word	0x080049b5
 800491c:	080049b5 	.word	0x080049b5
 8004920:	08004995 	.word	0x08004995
 8004924:	080049b5 	.word	0x080049b5
 8004928:	080049b5 	.word	0x080049b5
 800492c:	080049b5 	.word	0x080049b5
 8004930:	080049b5 	.word	0x080049b5
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049b5 	.word	0x080049b5
 800493c:	080049b5 	.word	0x080049b5
 8004940:	0800499d 	.word	0x0800499d
 8004944:	080049b5 	.word	0x080049b5
 8004948:	080049b5 	.word	0x080049b5
 800494c:	080049b5 	.word	0x080049b5
 8004950:	080049b5 	.word	0x080049b5
 8004954:	080049b5 	.word	0x080049b5
 8004958:	080049b5 	.word	0x080049b5
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049a5 	.word	0x080049a5
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049b5 	.word	0x080049b5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498a:	e222      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004992:	e21e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499a:	e21a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a2:	e216      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049aa:	e212      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b2:	e20e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ba:	e20a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6b      	ldr	r2, [pc, #428]	; (8004b70 <UART_SetConfig+0x340>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d130      	bne.n	8004a28 <UART_SetConfig+0x1f8>
 80049c6:	4b69      	ldr	r3, [pc, #420]	; (8004b6c <UART_SetConfig+0x33c>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d826      	bhi.n	8004a20 <UART_SetConfig+0x1f0>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x1a8>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049f6:	e1ec      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fe:	e1e8      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a06:	e1e4      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e1e0      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e1dc      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e1d8      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e1d4      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a51      	ldr	r2, [pc, #324]	; (8004b74 <UART_SetConfig+0x344>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d130      	bne.n	8004a94 <UART_SetConfig+0x264>
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <UART_SetConfig+0x33c>)
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d826      	bhi.n	8004a8c <UART_SetConfig+0x25c>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x214>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a62:	e1b6      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a6a:	e1b2      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a72:	e1ae      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7a:	e1aa      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e1a6      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8a:	e1a2      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a92:	e19e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <UART_SetConfig+0x348>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d130      	bne.n	8004b00 <UART_SetConfig+0x2d0>
 8004a9e:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <UART_SetConfig+0x33c>)
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d826      	bhi.n	8004af8 <UART_SetConfig+0x2c8>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x280>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac9 	.word	0x08004ac9
 8004ab4:	08004ad1 	.word	0x08004ad1
 8004ab8:	08004ad9 	.word	0x08004ad9
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004ae9 	.word	0x08004ae9
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ace:	e180      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ad6:	e17c      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ade:	e178      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e174      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e170      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e16c      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e168      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <UART_SetConfig+0x34c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d142      	bne.n	8004b90 <UART_SetConfig+0x360>
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <UART_SetConfig+0x33c>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d838      	bhi.n	8004b88 <UART_SetConfig+0x358>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x2ec>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3a:	e14a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b42:	e146      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b4a:	e142      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b52:	e13e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b54:	2320      	movs	r3, #32
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e13a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b5c:	cfff69f3 	.word	0xcfff69f3
 8004b60:	58000c00 	.word	0x58000c00
 8004b64:	11fff4ff 	.word	0x11fff4ff
 8004b68:	40011000 	.word	0x40011000
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	40004400 	.word	0x40004400
 8004b74:	40004800 	.word	0x40004800
 8004b78:	40004c00 	.word	0x40004c00
 8004b7c:	40005000 	.word	0x40005000
 8004b80:	2340      	movs	r3, #64	; 0x40
 8004b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b86:	e124      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b8e:	e120      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4acc      	ldr	r2, [pc, #816]	; (8004ec8 <UART_SetConfig+0x698>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d176      	bne.n	8004c88 <UART_SetConfig+0x458>
 8004b9a:	4bcc      	ldr	r3, [pc, #816]	; (8004ecc <UART_SetConfig+0x69c>)
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba2:	2b28      	cmp	r3, #40	; 0x28
 8004ba4:	d86c      	bhi.n	8004c80 <UART_SetConfig+0x450>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <UART_SetConfig+0x37c>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004c51 	.word	0x08004c51
 8004bb0:	08004c81 	.word	0x08004c81
 8004bb4:	08004c81 	.word	0x08004c81
 8004bb8:	08004c81 	.word	0x08004c81
 8004bbc:	08004c81 	.word	0x08004c81
 8004bc0:	08004c81 	.word	0x08004c81
 8004bc4:	08004c81 	.word	0x08004c81
 8004bc8:	08004c81 	.word	0x08004c81
 8004bcc:	08004c59 	.word	0x08004c59
 8004bd0:	08004c81 	.word	0x08004c81
 8004bd4:	08004c81 	.word	0x08004c81
 8004bd8:	08004c81 	.word	0x08004c81
 8004bdc:	08004c81 	.word	0x08004c81
 8004be0:	08004c81 	.word	0x08004c81
 8004be4:	08004c81 	.word	0x08004c81
 8004be8:	08004c81 	.word	0x08004c81
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c81 	.word	0x08004c81
 8004bf4:	08004c81 	.word	0x08004c81
 8004bf8:	08004c81 	.word	0x08004c81
 8004bfc:	08004c81 	.word	0x08004c81
 8004c00:	08004c81 	.word	0x08004c81
 8004c04:	08004c81 	.word	0x08004c81
 8004c08:	08004c81 	.word	0x08004c81
 8004c0c:	08004c69 	.word	0x08004c69
 8004c10:	08004c81 	.word	0x08004c81
 8004c14:	08004c81 	.word	0x08004c81
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004c81 	.word	0x08004c81
 8004c20:	08004c81 	.word	0x08004c81
 8004c24:	08004c81 	.word	0x08004c81
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c71 	.word	0x08004c71
 8004c30:	08004c81 	.word	0x08004c81
 8004c34:	08004c81 	.word	0x08004c81
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c81 	.word	0x08004c81
 8004c44:	08004c81 	.word	0x08004c81
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c56:	e0bc      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c5e:	e0b8      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c66:	e0b4      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c6e:	e0b0      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c70:	2320      	movs	r3, #32
 8004c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c76:	e0ac      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c78:	2340      	movs	r3, #64	; 0x40
 8004c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7e:	e0a8      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c86:	e0a4      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a90      	ldr	r2, [pc, #576]	; (8004ed0 <UART_SetConfig+0x6a0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d130      	bne.n	8004cf4 <UART_SetConfig+0x4c4>
 8004c92:	4b8e      	ldr	r3, [pc, #568]	; (8004ecc <UART_SetConfig+0x69c>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d826      	bhi.n	8004cec <UART_SetConfig+0x4bc>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x474>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cbd 	.word	0x08004cbd
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004ccd 	.word	0x08004ccd
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc2:	e086      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cca:	e082      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd2:	e07e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e07a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004cdc:	2320      	movs	r3, #32
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e076      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cea:	e072      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf2:	e06e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a76      	ldr	r2, [pc, #472]	; (8004ed4 <UART_SetConfig+0x6a4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d130      	bne.n	8004d60 <UART_SetConfig+0x530>
 8004cfe:	4b73      	ldr	r3, [pc, #460]	; (8004ecc <UART_SetConfig+0x69c>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d826      	bhi.n	8004d58 <UART_SetConfig+0x528>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x4e0>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d29 	.word	0x08004d29
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d39 	.word	0x08004d39
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2e:	e050      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d30:	2304      	movs	r3, #4
 8004d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d36:	e04c      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d3e:	e048      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d46:	e044      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	e040      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d56:	e03c      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5e:	e038      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <UART_SetConfig+0x6a8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d130      	bne.n	8004dcc <UART_SetConfig+0x59c>
 8004d6a:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <UART_SetConfig+0x69c>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d826      	bhi.n	8004dc4 <UART_SetConfig+0x594>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0x54c>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004da5 	.word	0x08004da5
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9a:	e01a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da2:	e016      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004daa:	e012      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db2:	e00e      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004db4:	2320      	movs	r3, #32
 8004db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dba:	e00a      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc2:	e006      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dca:	e002      	b.n	8004dd2 <UART_SetConfig+0x5a2>
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <UART_SetConfig+0x6a8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	f040 80ef 	bne.w	8004fbc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	dc46      	bgt.n	8004e74 <UART_SetConfig+0x644>
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	f2c0 8081 	blt.w	8004eee <UART_SetConfig+0x6be>
 8004dec:	3b02      	subs	r3, #2
 8004dee:	2b1e      	cmp	r3, #30
 8004df0:	d87d      	bhi.n	8004eee <UART_SetConfig+0x6be>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0x5c8>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e7b 	.word	0x08004e7b
 8004dfc:	08004eef 	.word	0x08004eef
 8004e00:	08004e83 	.word	0x08004e83
 8004e04:	08004eef 	.word	0x08004eef
 8004e08:	08004eef 	.word	0x08004eef
 8004e0c:	08004eef 	.word	0x08004eef
 8004e10:	08004e93 	.word	0x08004e93
 8004e14:	08004eef 	.word	0x08004eef
 8004e18:	08004eef 	.word	0x08004eef
 8004e1c:	08004eef 	.word	0x08004eef
 8004e20:	08004eef 	.word	0x08004eef
 8004e24:	08004eef 	.word	0x08004eef
 8004e28:	08004eef 	.word	0x08004eef
 8004e2c:	08004eef 	.word	0x08004eef
 8004e30:	08004ea3 	.word	0x08004ea3
 8004e34:	08004eef 	.word	0x08004eef
 8004e38:	08004eef 	.word	0x08004eef
 8004e3c:	08004eef 	.word	0x08004eef
 8004e40:	08004eef 	.word	0x08004eef
 8004e44:	08004eef 	.word	0x08004eef
 8004e48:	08004eef 	.word	0x08004eef
 8004e4c:	08004eef 	.word	0x08004eef
 8004e50:	08004eef 	.word	0x08004eef
 8004e54:	08004eef 	.word	0x08004eef
 8004e58:	08004eef 	.word	0x08004eef
 8004e5c:	08004eef 	.word	0x08004eef
 8004e60:	08004eef 	.word	0x08004eef
 8004e64:	08004eef 	.word	0x08004eef
 8004e68:	08004eef 	.word	0x08004eef
 8004e6c:	08004eef 	.word	0x08004eef
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d036      	beq.n	8004ee6 <UART_SetConfig+0x6b6>
 8004e78:	e039      	b.n	8004eee <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e7a:	f7ff f867 	bl	8003f4c <HAL_RCCEx_GetD3PCLK1Freq>
 8004e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e80:	e03b      	b.n	8004efa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f876 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e90:	e033      	b.n	8004efa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff f9c2 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ea0:	e02b      	b.n	8004efa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <UART_SetConfig+0x69c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <UART_SetConfig+0x69c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	08db      	lsrs	r3, r3, #3
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <UART_SetConfig+0x6ac>)
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ec0:	e01b      	b.n	8004efa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <UART_SetConfig+0x6ac>)
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ec6:	e018      	b.n	8004efa <UART_SetConfig+0x6ca>
 8004ec8:	40011400 	.word	0x40011400
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	40007800 	.word	0x40007800
 8004ed4:	40007c00 	.word	0x40007c00
 8004ed8:	58000c00 	.word	0x58000c00
 8004edc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ee0:	4bc4      	ldr	r3, [pc, #784]	; (80051f4 <UART_SetConfig+0x9c4>)
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ee4:	e009      	b.n	8004efa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eec:	e005      	b.n	8004efa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 81da 	beq.w	80052b6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	4abc      	ldr	r2, [pc, #752]	; (80051f8 <UART_SetConfig+0x9c8>)
 8004f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f14:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d305      	bcc.n	8004f32 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d903      	bls.n	8004f3a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f38:	e1bd      	b.n	80052b6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	4aac      	ldr	r2, [pc, #688]	; (80051f8 <UART_SetConfig+0x9c8>)
 8004f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	f7fb f9c1 	bl	80002d8 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	020b      	lsls	r3, r1, #8
 8004f68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f6c:	0202      	lsls	r2, r0, #8
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	6849      	ldr	r1, [r1, #4]
 8004f72:	0849      	lsrs	r1, r1, #1
 8004f74:	4608      	mov	r0, r1
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	1814      	adds	r4, r2, r0
 8004f7c:	eb43 0501 	adc.w	r5, r3, r1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb f9a3 	bl	80002d8 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4613      	mov	r3, r2
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa0:	d308      	bcc.n	8004fb4 <UART_SetConfig+0x784>
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa8:	d204      	bcs.n	8004fb4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e180      	b.n	80052b6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fba:	e17c      	b.n	80052b6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	f040 80be 	bne.w	8005144 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004fc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	dc49      	bgt.n	8005064 <UART_SetConfig+0x834>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db7c      	blt.n	80050ce <UART_SetConfig+0x89e>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d87a      	bhi.n	80050ce <UART_SetConfig+0x89e>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x7b0>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	0800506b 	.word	0x0800506b
 8004fe4:	08005073 	.word	0x08005073
 8004fe8:	080050cf 	.word	0x080050cf
 8004fec:	080050cf 	.word	0x080050cf
 8004ff0:	0800507b 	.word	0x0800507b
 8004ff4:	080050cf 	.word	0x080050cf
 8004ff8:	080050cf 	.word	0x080050cf
 8004ffc:	080050cf 	.word	0x080050cf
 8005000:	0800508b 	.word	0x0800508b
 8005004:	080050cf 	.word	0x080050cf
 8005008:	080050cf 	.word	0x080050cf
 800500c:	080050cf 	.word	0x080050cf
 8005010:	080050cf 	.word	0x080050cf
 8005014:	080050cf 	.word	0x080050cf
 8005018:	080050cf 	.word	0x080050cf
 800501c:	080050cf 	.word	0x080050cf
 8005020:	0800509b 	.word	0x0800509b
 8005024:	080050cf 	.word	0x080050cf
 8005028:	080050cf 	.word	0x080050cf
 800502c:	080050cf 	.word	0x080050cf
 8005030:	080050cf 	.word	0x080050cf
 8005034:	080050cf 	.word	0x080050cf
 8005038:	080050cf 	.word	0x080050cf
 800503c:	080050cf 	.word	0x080050cf
 8005040:	080050cf 	.word	0x080050cf
 8005044:	080050cf 	.word	0x080050cf
 8005048:	080050cf 	.word	0x080050cf
 800504c:	080050cf 	.word	0x080050cf
 8005050:	080050cf 	.word	0x080050cf
 8005054:	080050cf 	.word	0x080050cf
 8005058:	080050cf 	.word	0x080050cf
 800505c:	080050cf 	.word	0x080050cf
 8005060:	080050c1 	.word	0x080050c1
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d02e      	beq.n	80050c6 <UART_SetConfig+0x896>
 8005068:	e031      	b.n	80050ce <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506a:	f7fe f803 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 800506e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005070:	e033      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005072:	f7fe f815 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8005076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005078:	e02f      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe ff7a 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005088:	e027      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f8c6 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005098:	e01f      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509a:	4b58      	ldr	r3, [pc, #352]	; (80051fc <UART_SetConfig+0x9cc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050a6:	4b55      	ldr	r3, [pc, #340]	; (80051fc <UART_SetConfig+0x9cc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	08db      	lsrs	r3, r3, #3
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	4a53      	ldr	r2, [pc, #332]	; (8005200 <UART_SetConfig+0x9d0>)
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050b8:	e00f      	b.n	80050da <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80050ba:	4b51      	ldr	r3, [pc, #324]	; (8005200 <UART_SetConfig+0x9d0>)
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050be:	e00c      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050c0:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <UART_SetConfig+0x9c4>)
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050c4:	e009      	b.n	80050da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050cc:	e005      	b.n	80050da <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80ea 	beq.w	80052b6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	4a44      	ldr	r2, [pc, #272]	; (80051f8 <UART_SetConfig+0x9c8>)
 80050e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f4:	005a      	lsls	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d916      	bls.n	800513c <UART_SetConfig+0x90c>
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d212      	bcs.n	800513c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	b29b      	uxth	r3, r3
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	b29a      	uxth	r2, r3
 800512c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800512e:	4313      	orrs	r3, r2
 8005130:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	e0bc      	b.n	80052b6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005142:	e0b8      	b.n	80052b6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005144:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005148:	2b20      	cmp	r3, #32
 800514a:	dc4b      	bgt.n	80051e4 <UART_SetConfig+0x9b4>
 800514c:	2b00      	cmp	r3, #0
 800514e:	f2c0 8087 	blt.w	8005260 <UART_SetConfig+0xa30>
 8005152:	2b20      	cmp	r3, #32
 8005154:	f200 8084 	bhi.w	8005260 <UART_SetConfig+0xa30>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0x930>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	080051eb 	.word	0x080051eb
 8005164:	08005205 	.word	0x08005205
 8005168:	08005261 	.word	0x08005261
 800516c:	08005261 	.word	0x08005261
 8005170:	0800520d 	.word	0x0800520d
 8005174:	08005261 	.word	0x08005261
 8005178:	08005261 	.word	0x08005261
 800517c:	08005261 	.word	0x08005261
 8005180:	0800521d 	.word	0x0800521d
 8005184:	08005261 	.word	0x08005261
 8005188:	08005261 	.word	0x08005261
 800518c:	08005261 	.word	0x08005261
 8005190:	08005261 	.word	0x08005261
 8005194:	08005261 	.word	0x08005261
 8005198:	08005261 	.word	0x08005261
 800519c:	08005261 	.word	0x08005261
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	08005261 	.word	0x08005261
 80051a8:	08005261 	.word	0x08005261
 80051ac:	08005261 	.word	0x08005261
 80051b0:	08005261 	.word	0x08005261
 80051b4:	08005261 	.word	0x08005261
 80051b8:	08005261 	.word	0x08005261
 80051bc:	08005261 	.word	0x08005261
 80051c0:	08005261 	.word	0x08005261
 80051c4:	08005261 	.word	0x08005261
 80051c8:	08005261 	.word	0x08005261
 80051cc:	08005261 	.word	0x08005261
 80051d0:	08005261 	.word	0x08005261
 80051d4:	08005261 	.word	0x08005261
 80051d8:	08005261 	.word	0x08005261
 80051dc:	08005261 	.word	0x08005261
 80051e0:	08005253 	.word	0x08005253
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d037      	beq.n	8005258 <UART_SetConfig+0xa28>
 80051e8:	e03a      	b.n	8005260 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ea:	f7fd ff43 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 80051ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80051f0:	e03c      	b.n	800526c <UART_SetConfig+0xa3c>
 80051f2:	bf00      	nop
 80051f4:	003d0900 	.word	0x003d0900
 80051f8:	08005ee8 	.word	0x08005ee8
 80051fc:	58024400 	.word	0x58024400
 8005200:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fd ff4c 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8005208:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800520a:	e02f      	b.n	800526c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe feb1 	bl	8003f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800521a:	e027      	b.n	800526c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe fffd 	bl	8004220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800522a:	e01f      	b.n	800526c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <UART_SetConfig+0xab0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005238:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <UART_SetConfig+0xab0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <UART_SetConfig+0xab4>)
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800524a:	e00f      	b.n	800526c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <UART_SetConfig+0xab4>)
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005250:	e00c      	b.n	800526c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005252:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <UART_SetConfig+0xab8>)
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005256:	e009      	b.n	800526c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800525e:	e005      	b.n	800526c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800526a:	bf00      	nop
    }

    if (pclk != 0U)
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d021      	beq.n	80052b6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <UART_SetConfig+0xabc>)
 8005278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800527c:	461a      	mov	r2, r3
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	fbb3 f2f2 	udiv	r2, r3, r2
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2b0f      	cmp	r3, #15
 800529a:	d909      	bls.n	80052b0 <UART_SetConfig+0xa80>
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a2:	d205      	bcs.n	80052b0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	e002      	b.n	80052b6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80052d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3738      	adds	r7, #56	; 0x38
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	08005ee8 	.word	0x08005ee8

080052f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01a      	beq.n	8005406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ee:	d10a      	bne.n	8005406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005444:	f7fb fdb0 	bl	8000fa8 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d10e      	bne.n	8005476 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f82f 	bl	80054ca <UART_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e025      	b.n	80054c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b04      	cmp	r3, #4
 8005482:	d10e      	bne.n	80054a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f819 	bl	80054ca <UART_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e00f      	b.n	80054c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b09c      	sub	sp, #112	; 0x70
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054da:	e0a9      	b.n	8005630 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	f000 80a5 	beq.w	8005630 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fb fd5f 	bl	8000fa8 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <UART_WaitOnFlagUntilTimeout+0x32>
 80054f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d140      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800550a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005510:	667b      	str	r3, [r7, #100]	; 0x64
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800551c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005520:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	663b      	str	r3, [r7, #96]	; 0x60
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800554e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e069      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d051      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559a:	d149      	bne.n	8005630 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
 80055c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	613b      	str	r3, [r7, #16]
   return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055f8:	623a      	str	r2, [r7, #32]
 80055fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69f9      	ldr	r1, [r7, #28]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	61bb      	str	r3, [r7, #24]
   return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e010      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	f43f af46 	beq.w	80054dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3770      	adds	r7, #112	; 0x70
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UARTEx_DisableFifoMode+0x16>
 800566c:	2302      	movs	r3, #2
 800566e:	e027      	b.n	80056c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800569e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e02d      	b.n	8005740 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	; 0x24
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f84f 	bl	80057c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e02d      	b.n	80057bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f811 	bl	80057c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d108      	bne.n	80057e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057e4:	e031      	b.n	800584a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057e6:	2310      	movs	r3, #16
 80057e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ea:	2310      	movs	r3, #16
 80057ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	0e5b      	lsrs	r3, r3, #25
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	0f5b      	lsrs	r3, r3, #29
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	7b3a      	ldrb	r2, [r7, #12]
 8005812:	4911      	ldr	r1, [pc, #68]	; (8005858 <UARTEx_SetNbDataToProcess+0x94>)
 8005814:	5c8a      	ldrb	r2, [r1, r2]
 8005816:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800581a:	7b3a      	ldrb	r2, [r7, #12]
 800581c:	490f      	ldr	r1, [pc, #60]	; (800585c <UARTEx_SetNbDataToProcess+0x98>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005820:	fb93 f3f2 	sdiv	r3, r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	7b7a      	ldrb	r2, [r7, #13]
 8005830:	4909      	ldr	r1, [pc, #36]	; (8005858 <UARTEx_SetNbDataToProcess+0x94>)
 8005832:	5c8a      	ldrb	r2, [r1, r2]
 8005834:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005838:	7b7a      	ldrb	r2, [r7, #13]
 800583a:	4908      	ldr	r1, [pc, #32]	; (800585c <UARTEx_SetNbDataToProcess+0x98>)
 800583c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800583e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	08005f00 	.word	0x08005f00
 800585c:	08005f08 	.word	0x08005f08

08005860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 001c 	add.w	r0, r7, #28
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	2b01      	cmp	r3, #1
 8005876:	d120      	bne.n	80058ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <USB_CoreInit+0xd4>)
 800588a:	4013      	ands	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800589c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d105      	bne.n	80058ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 faa8 	bl	8005e04 <USB_CoreReset>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	e01a      	b.n	80058f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa9c 	bl	8005e04 <USB_CoreReset>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
 80058e2:	e005      	b.n	80058f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d116      	bne.n	8005924 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <USB_CoreInit+0xd8>)
 8005906:	4313      	orrs	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f043 0206 	orr.w	r2, r3, #6
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005930:	b004      	add	sp, #16
 8005932:	4770      	bx	lr
 8005934:	ffbdffbf 	.word	0xffbdffbf
 8005938:	03ee0000 	.word	0x03ee0000

0800593c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 0201 	bic.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d115      	bne.n	80059ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800598c:	2001      	movs	r0, #1
 800598e:	f7fb fb17 	bl	8000fc0 <HAL_Delay>
      ms++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa25 	bl	8005de8 <USB_GetMode>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d01e      	beq.n	80059e2 <USB_SetCurrentMode+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b31      	cmp	r3, #49	; 0x31
 80059a8:	d9f0      	bls.n	800598c <USB_SetCurrentMode+0x2e>
 80059aa:	e01a      	b.n	80059e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d115      	bne.n	80059de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059be:	2001      	movs	r0, #1
 80059c0:	f7fb fafe 	bl	8000fc0 <HAL_Delay>
      ms++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa0c 	bl	8005de8 <USB_GetMode>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <USB_SetCurrentMode+0x84>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b31      	cmp	r3, #49	; 0x31
 80059da:	d9f0      	bls.n	80059be <USB_SetCurrentMode+0x60>
 80059dc:	e001      	b.n	80059e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e005      	b.n	80059ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b32      	cmp	r3, #50	; 0x32
 80059e6:	d101      	bne.n	80059ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059f8:	b084      	sub	sp, #16
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	e009      	b.n	8005a2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3340      	adds	r3, #64	; 0x40
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b0e      	cmp	r3, #14
 8005a30:	d9f2      	bls.n	8005a18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11c      	bne.n	8005a72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e005      	b.n	8005a7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	4619      	mov	r1, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	461a      	mov	r2, r3
 8005a9a:	680b      	ldr	r3, [r1, #0]
 8005a9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10c      	bne.n	8005abe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f961 	bl	8005d74 <USB_SetDevSpeed>
 8005ab2:	e008      	b.n	8005ac6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f95c 	bl	8005d74 <USB_SetDevSpeed>
 8005abc:	e003      	b.n	8005ac6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005abe:	2103      	movs	r1, #3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f957 	bl	8005d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8f3 	bl	8005cb4 <USB_FlushTxFifo>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f91d 	bl	8005d18 <USB_FlushRxFifo>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	461a      	mov	r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	e043      	b.n	8005b9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d118      	bne.n	8005b5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e013      	b.n	8005b6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	461a      	mov	r2, r3
 8005b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e008      	b.n	8005b6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3301      	adds	r3, #1
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3b7      	bcc.n	8005b12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e043      	b.n	8005c30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bbe:	d118      	bne.n	8005bf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e013      	b.n	8005c04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e008      	b.n	8005c04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3b7      	bcc.n	8005ba8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f043 0210 	orr.w	r2, r3, #16
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <USB_DevInit+0x2b4>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <USB_DevInit+0x2b8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ca8:	b004      	add	sp, #16
 8005caa:	4770      	bx	lr
 8005cac:	803c3800 	.word	0x803c3800
 8005cb0:	40000004 	.word	0x40000004

08005cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <USB_FlushTxFifo+0x60>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e01a      	b.n	8005d08 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	daf3      	bge.n	8005cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <USB_FlushTxFifo+0x60>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e006      	b.n	8005d08 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d0f1      	beq.n	8005cea <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	00030d40 	.word	0x00030d40

08005d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <USB_FlushRxFifo+0x58>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e017      	b.n	8005d64 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	daf3      	bge.n	8005d24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2210      	movs	r2, #16
 8005d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <USB_FlushRxFifo+0x58>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e006      	b.n	8005d64 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d0f1      	beq.n	8005d46 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	00030d40 	.word	0x00030d40

08005d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d94:	4313      	orrs	r3, r2
 8005d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <USB_CoreReset+0x60>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e01a      	b.n	8005e56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	daf3      	bge.n	8005e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f043 0201 	orr.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <USB_CoreReset+0x60>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e006      	b.n	8005e56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d0f1      	beq.n	8005e38 <USB_CoreReset+0x34>

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	00030d40 	.word	0x00030d40

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ea0 <__libc_init_array+0x38>)
 8005e6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ea4 <__libc_init_array+0x3c>)
 8005e6e:	1b64      	subs	r4, r4, r5
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	2600      	movs	r6, #0
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d109      	bne.n	8005e8c <__libc_init_array+0x24>
 8005e78:	4d0b      	ldr	r5, [pc, #44]	; (8005ea8 <__libc_init_array+0x40>)
 8005e7a:	4c0c      	ldr	r4, [pc, #48]	; (8005eac <__libc_init_array+0x44>)
 8005e7c:	f000 f820 	bl	8005ec0 <_init>
 8005e80:	1b64      	subs	r4, r4, r5
 8005e82:	10a4      	asrs	r4, r4, #2
 8005e84:	2600      	movs	r6, #0
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	d105      	bne.n	8005e96 <__libc_init_array+0x2e>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e90:	4798      	blx	r3
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7ee      	b.n	8005e74 <__libc_init_array+0xc>
 8005e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9a:	4798      	blx	r3
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	e7f2      	b.n	8005e86 <__libc_init_array+0x1e>
 8005ea0:	08005f18 	.word	0x08005f18
 8005ea4:	08005f18 	.word	0x08005f18
 8005ea8:	08005f18 	.word	0x08005f18
 8005eac:	08005f1c 	.word	0x08005f1c

08005eb0 <memset>:
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	f803 1b01 	strb.w	r1, [r3], #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
