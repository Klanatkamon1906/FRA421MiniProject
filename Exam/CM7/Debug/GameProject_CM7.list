
GameProject_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006194  08006194  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800619c  0800619c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  080061b8  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08006218  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000057c  240000d4  08006278  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000650  08006278  00020650  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000236dd  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000341d  00000000  00000000  000437df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00046c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f20  00000000  00000000  00047c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a314  00000000  00000000  00048b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000146a8  00000000  00000000  00082e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001802d5  00000000  00000000  000974e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002177b9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043d0  00000000  00000000  0021780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006144 	.word	0x08006144

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08006144 	.word	0x08006144

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b55      	ldr	r3, [pc, #340]	; (8000868 <main+0x164>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 faad 	bl	8000c8c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fcdb 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f89f 	bl	8000878 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <main+0x164>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a49      	ldr	r2, [pc, #292]	; (8000868 <main+0x164>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <main+0x164>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 fc61 	bl	8002020 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 fc77 	bl	8002054 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <main+0x164>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 fa7f 	bl	8000c8c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9c1 	bl	8000b14 <MX_GPIO_Init>
  MX_ETH_Init();
 8000792:	f000 f8f5 	bl	8000980 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f93f 	bl	8000a18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f989 	bl	8000ab0 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Can CM7 lock HSEM1
	  if(HAL_HSEM_FastTake(1) == HAL_OK)
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fc3e 	bl	8002020 <HAL_HSEM_FastTake>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10c      	bne.n	80007c4 <main+0xc0>
	  {
		  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,sharedMemory->led1);
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <main+0x168>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	2101      	movs	r1, #1
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <main+0x16c>)
 80007b8:	f001 fc18 	bl	8001fec <HAL_GPIO_WritePin>
		  // Unlock HSEM1
		  HAL_HSEM_Release(1,0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f001 fc48 	bl	8002054 <HAL_HSEM_Release>
	  }

	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	482a      	ldr	r0, [pc, #168]	; (8000874 <main+0x170>)
 80007ca:	f001 fc0f 	bl	8001fec <HAL_GPIO_WritePin>

	  if(HAL_HSEM_FastTake(2) == HAL_OK)
 80007ce:	2002      	movs	r0, #2
 80007d0:	f001 fc26 	bl	8002020 <HAL_HSEM_FastTake>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1e1      	bne.n	800079e <main+0x9a>
	  {
		  switch(sharedMemory->State){
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <main+0x168>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7d1b      	ldrb	r3, [r3, #20]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d83b      	bhi.n	800085c <main+0x158>
 80007e4:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <main+0xe8>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	0800085d 	.word	0x0800085d
 80007f0:	080007fd 	.word	0x080007fd
 80007f4:	0800081d 	.word	0x0800081d
 80007f8:	0800083d 	.word	0x0800083d
		  case 0:
			  break;
		  case 1:
			  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <main+0x170>)
 8000802:	f001 fbf3 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2120      	movs	r1, #32
 800080a:	481a      	ldr	r0, [pc, #104]	; (8000874 <main+0x170>)
 800080c:	f001 fbee 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2110      	movs	r1, #16
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <main+0x170>)
 8000816:	f001 fbe9 	bl	8001fec <HAL_GPIO_WritePin>
			  break;
 800081a:	e020      	b.n	800085e <main+0x15a>
		  case 2:
			  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <main+0x170>)
 8000822:	f001 fbe3 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <main+0x170>)
 800082c:	f001 fbde 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <main+0x170>)
 8000836:	f001 fbd9 	bl	8001fec <HAL_GPIO_WritePin>
			  break;
 800083a:	e010      	b.n	800085e <main+0x15a>
		  case 3:
			  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <main+0x170>)
 8000842:	f001 fbd3 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <main+0x170>)
 800084c:	f001 fbce 	bl	8001fec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <main+0x170>)
 8000856:	f001 fbc9 	bl	8001fec <HAL_GPIO_WritePin>
			  break;
 800085a:	e000      	b.n	800085e <main+0x15a>
		  default:
			  break;
 800085c:	bf00      	nop
		  }
		  // Unlock HSEM2
		  HAL_HSEM_Release(2,0);
 800085e:	2100      	movs	r1, #0
 8000860:	2002      	movs	r0, #2
 8000862:	f001 fbf7 	bl	8002054 <HAL_HSEM_Release>
	  if(HAL_HSEM_FastTake(1) == HAL_OK)
 8000866:	e79a      	b.n	800079e <main+0x9a>
 8000868:	58024400 	.word	0x58024400
 800086c:	24000008 	.word	0x24000008
 8000870:	58020400 	.word	0x58020400
 8000874:	58020c00 	.word	0x58020c00

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	; 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	224c      	movs	r2, #76	; 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fc54 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 fc4e 	bl	8006134 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000898:	2004      	movs	r0, #4
 800089a:	f001 fd37 	bl	800230c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <SystemClock_Config+0xfc>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a33      	ldr	r2, [pc, #204]	; (8000974 <SystemClock_Config+0xfc>)
 80008a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <SystemClock_Config+0xfc>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <SystemClock_Config+0x100>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <SystemClock_Config+0x100>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <SystemClock_Config+0x100>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xfc>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <SystemClock_Config+0x104>)
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e4:	f023 0303 	bic.w	r3, r3, #3
 80008e8:	4a24      	ldr	r2, [pc, #144]	; (800097c <SystemClock_Config+0x104>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	2302      	movs	r3, #2
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000906:	2378      	movs	r3, #120	; 0x78
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000916:	230c      	movs	r3, #12
 8000918:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fd5a 	bl	80023e0 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000932:	f000 f9ab 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	233f      	movs	r3, #63	; 0x3f
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000942:	2308      	movs	r3, #8
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2104      	movs	r1, #4
 800095c:	4618      	mov	r0, r3
 800095e:	f002 f96b 	bl	8002c38 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000968:	f000 f990 	bl	8000c8c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3770      	adds	r7, #112	; 0x70
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024800 	.word	0x58024800
 8000978:	58000400 	.word	0x58000400
 800097c:	58024400 	.word	0x58024400

08000980 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_ETH_Init+0x80>)
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <MX_ETH_Init+0x84>)
 8000988:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_ETH_Init+0x88>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_ETH_Init+0x88>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_ETH_Init+0x88>)
 8000998:	22e1      	movs	r2, #225	; 0xe1
 800099a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_ETH_Init+0x88>)
 800099e:	2200      	movs	r2, #0
 80009a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_ETH_Init+0x88>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_ETH_Init+0x88>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_ETH_Init+0x80>)
 80009b0:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_ETH_Init+0x88>)
 80009b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_ETH_Init+0x80>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_ETH_Init+0x80>)
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_ETH_Init+0x8c>)
 80009be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_ETH_Init+0x80>)
 80009c2:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <MX_ETH_Init+0x90>)
 80009c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_ETH_Init+0x80>)
 80009c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_ETH_Init+0x80>)
 80009d0:	f000 fd46 	bl	8001460 <HAL_ETH_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009da:	f000 f957 	bl	8000c8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_ETH_Init+0x94>)
 80009e4:	f005 fba6 	bl	8006134 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_ETH_Init+0x94>)
 80009ea:	2221      	movs	r2, #33	; 0x21
 80009ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_ETH_Init+0x94>)
 80009f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_ETH_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	24000590 	.word	0x24000590
 8000a04:	40028000 	.word	0x40028000
 8000a08:	240000f0 	.word	0x240000f0
 8000a0c:	24000074 	.word	0x24000074
 8000a10:	24000014 	.word	0x24000014
 8000a14:	24000618 	.word	0x24000618

08000a18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART3_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a62:	f003 ffd7 	bl	8004a14 <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f90e 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f004 ff6c 	bl	8005950 <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 f905 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a86:	f004 ffa1 	bl	80059cc <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f8fc 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f004 ff22 	bl	80058de <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f8f4 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240000f8 	.word	0x240000f8
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2209      	movs	r2, #9
 8000abe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	f001 fac0 	bl	800207c <HAL_PCD_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b02:	f000 f8c3 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	24000188 	.word	0x24000188
 8000b10:	40080000 	.word	0x40080000

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b54      	ldr	r3, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a52      	ldr	r2, [pc, #328]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b48:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a3c      	ldr	r2, [pc, #240]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_GPIO_Init+0x168>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <MX_GPIO_Init+0x16c>)
 8000c04:	f001 f9f2 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	21f0      	movs	r1, #240	; 0xf0
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000c0e:	f001 f9ed 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x174>)
 8000c18:	f001 f9e8 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c1c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <MX_GPIO_Init+0x16c>)
 8000c36:	f001 f829 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000c3a:	23f0      	movs	r3, #240	; 0xf0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_GPIO_Init+0x170>)
 8000c52:	f001 f81b 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_GPIO_Init+0x174>)
 8000c6e:	f001 f80d 	bl	8001c8c <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58020c00 	.word	0x58020c00
 8000c88:	58021000 	.word	0x58021000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x30>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a59      	ldr	r2, [pc, #356]	; (8000e50 <HAL_ETH_MspInit+0x184>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	f040 80ab 	bne.w	8000e46 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf6:	4a57      	ldr	r2, [pc, #348]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d00:	4b54      	ldr	r3, [pc, #336]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d0e:	4b51      	ldr	r3, [pc, #324]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1e:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d2c:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d32:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3c:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a39      	ldr	r2, [pc, #228]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dc2:	2332      	movs	r3, #50	; 0x32
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481e      	ldr	r0, [pc, #120]	; (8000e58 <HAL_ETH_MspInit+0x18c>)
 8000dde:	f000 ff55 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000de2:	2386      	movs	r3, #134	; 0x86
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df2:	230b      	movs	r3, #11
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <HAL_ETH_MspInit+0x190>)
 8000dfe:	f000 ff45 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e14:	230b      	movs	r3, #11
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4810      	ldr	r0, [pc, #64]	; (8000e60 <HAL_ETH_MspInit+0x194>)
 8000e20:	f000 ff34 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_ETH_MspInit+0x198>)
 8000e42:	f000 ff23 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	; 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40028000 	.word	0x40028000
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58020800 	.word	0x58020800
 8000e5c:	58020000 	.word	0x58020000
 8000e60:	58020400 	.word	0x58020400
 8000e64:	58021800 	.word	0x58021800

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0b8      	sub	sp, #224	; 0xe0
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	22bc      	movs	r2, #188	; 0xbc
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f953 	bl	8006134 <memset>
  if(huart->Instance==USART3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <HAL_UART_MspInit+0xc0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d142      	bne.n	8000f1e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fa52 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eb2:	f7ff feeb 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000f1a:	f000 feb7 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	37e0      	adds	r7, #224	; 0xe0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020c00 	.word	0x58020c00

08000f34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b8      	sub	sp, #224	; 0xe0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	22bc      	movs	r2, #188	; 0xbc
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 f8ed 	bl	8006134 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a36      	ldr	r2, [pc, #216]	; (8001038 <HAL_PCD_MspInit+0x104>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d165      	bne.n	8001030 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f6e:	2318      	movs	r3, #24
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f82:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f9db 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000fa0:	f7ff fe74 	bl	8000c8c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fa4:	f001 fa0c 	bl	80023c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_PCD_MspInit+0x108>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_PCD_MspInit+0x108>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_PCD_MspInit+0x108>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fc6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fea:	4619      	mov	r1, r3
 8000fec:	4814      	ldr	r0, [pc, #80]	; (8001040 <HAL_PCD_MspInit+0x10c>)
 8000fee:	f000 fe4d 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_PCD_MspInit+0x10c>)
 800100e:	f000 fe3d 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_PCD_MspInit+0x108>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_PCD_MspInit+0x108>)
 800101a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800101e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_PCD_MspInit+0x108>)
 8001024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	37e0      	adds	r7, #224	; 0xe0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40080000 	.word	0x40080000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020000 	.word	0x58020000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f89e 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800109c:	f7ff fa98 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f005 f811 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fb1b 	bl	8000704 <main>
  bx  lr
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80010dc:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 80010e0:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80010e4:	24000650 	.word	0x24000650

080010e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC3_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 f982 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f8:	f001 ff54 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_Init+0x68>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	4913      	ldr	r1, [pc, #76]	; (8001158 <HAL_Init+0x6c>)
 800110a:	5ccb      	ldrb	r3, [r1, r3]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_Init+0x68>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_Init+0x6c>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_Init+0x70>)
 800112e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f814 	bl	8001164 <HAL_InitTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e002      	b.n	800114c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001146:	f7ff fda7 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	58024400 	.word	0x58024400
 8001158:	0800615c 	.word	0x0800615c
 800115c:	24000004 	.word	0x24000004
 8001160:	24000000 	.word	0x24000000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_InitTick+0x60>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e021      	b.n	80011bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_InitTick+0x64>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_InitTick+0x60>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f959 	bl	8001446 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f931 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x68>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000010 	.word	0x24000010
 80011c8:	24000000 	.word	0x24000000
 80011cc:	2400000c 	.word	0x2400000c

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	24000010 	.word	0x24000010
 80011f4:	2400064c 	.word	0x2400064c

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2400064c 	.word	0x2400064c

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000010 	.word	0x24000010

08001258 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetREVID+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0c1b      	lsrs	r3, r3, #16
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	5c001000 	.word	0x5c001000

08001270 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001280:	4904      	ldr	r1, [pc, #16]	; (8001294 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	58000400 	.word	0x58000400

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0000 	.word	0x05fa0000

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff47 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff5e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffb2 	bl	80013b8 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0c6      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc26 	bl	8000ccc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2223      	movs	r2, #35	; 0x23
 8001484:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b60      	ldr	r3, [pc, #384]	; (8001608 <HAL_ETH_Init+0x1a8>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800148c:	4a5e      	ldr	r2, [pc, #376]	; (8001608 <HAL_ETH_Init+0x1a8>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001496:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_ETH_Init+0x1a8>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fedf 	bl	8001270 <HAL_SYSCFG_ETHInterfaceSelect>
 80014b2:	e003      	b.n	80014bc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014b8:	f7ff feda 	bl	8001270 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fe90 	bl	80011f8 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014da:	e00f      	b.n	80014fc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80014dc:	f7ff fe8c 	bl	80011f8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ea:	d907      	bls.n	80014fc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2204      	movs	r2, #4
 80014f0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	22e0      	movs	r2, #224	; 0xe0
 80014f6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e081      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e6      	bne.n	80014dc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fac0 	bl	8001a94 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001514:	f001 fec0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8001518:	4603      	mov	r3, r0
 800151a:	4a3c      	ldr	r2, [pc, #240]	; (800160c <HAL_ETH_Init+0x1ac>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3a01      	subs	r2, #1
 8001528:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fa13 	bl	8001958 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001548:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800154c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	22e0      	movs	r2, #224	; 0xe0
 8001564:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e04a      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001572:	4413      	add	r3, r2
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_ETH_Init+0x1b0>)
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6952      	ldr	r2, [r2, #20]
 800157e:	0052      	lsls	r2, r2, #1
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	431a      	orrs	r2, r3
 8001586:	f241 1308 	movw	r3, #4360	; 0x1108
 800158a:	440b      	add	r3, r1
 800158c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fad8 	bl	8001b44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb1c 	bl	8001bd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	3305      	adds	r3, #5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	021a      	lsls	r2, r3, #8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	061a      	lsls	r2, r3, #24
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	3302      	adds	r3, #2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2210      	movs	r2, #16
 80015f6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2210      	movs	r2, #16
 80015fc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	58024400 	.word	0x58024400
 800160c:	431bde83 	.word	0x431bde83
 8001610:	ffff8001 	.word	0xffff8001

08001614 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001626:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800162e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001636:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	7b5b      	ldrb	r3, [r3, #13]
 800163c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800163e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7bdb      	ldrb	r3, [r3, #15]
 800164c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800164e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	7c12      	ldrb	r2, [r2, #16]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <ETH_SetMACConfig+0x4a>
 8001658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0x4c>
 800165e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001660:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	7c52      	ldrb	r2, [r2, #17]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d102      	bne.n	8001670 <ETH_SetMACConfig+0x5c>
 800166a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166e:	e000      	b.n	8001672 <ETH_SetMACConfig+0x5e>
 8001670:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001672:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7c9b      	ldrb	r3, [r3, #18]
 8001678:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800167a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001680:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001686:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800168e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7f5b      	ldrb	r3, [r3, #29]
 8001694:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001696:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	7f92      	ldrb	r2, [r2, #30]
 800169c:	2a00      	cmp	r2, #0
 800169e:	d102      	bne.n	80016a6 <ETH_SetMACConfig+0x92>
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	e000      	b.n	80016a8 <ETH_SetMACConfig+0x94>
 80016a6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80016a8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	7fdb      	ldrb	r3, [r3, #31]
 80016ae:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80016b0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d102      	bne.n	80016c2 <ETH_SetMACConfig+0xae>
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	e000      	b.n	80016c4 <ETH_SetMACConfig+0xb0>
 80016c2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016c4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80016ca:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016d2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80016d4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <ETH_SetMACConfig+0x22c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001700:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001708:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800170a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001712:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001714:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800171c:	2a00      	cmp	r2, #0
 800171e:	d102      	bne.n	8001726 <ETH_SetMACConfig+0x112>
 8001720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001724:	e000      	b.n	8001728 <ETH_SetMACConfig+0x114>
 8001726:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001728:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <ETH_SetMACConfig+0x230>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	430b      	orrs	r3, r1
 8001744:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <ETH_SetMACConfig+0x234>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	430b      	orrs	r3, r1
 8001768:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001770:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001776:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800177e:	2a00      	cmp	r2, #0
 8001780:	d101      	bne.n	8001786 <ETH_SetMACConfig+0x172>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	e000      	b.n	8001788 <ETH_SetMACConfig+0x174>
 8001786:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001788:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800179a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f023 0103 	bic.w	r1, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80017de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d101      	bne.n	8001802 <ETH_SetMACConfig+0x1ee>
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	e000      	b.n	8001804 <ETH_SetMACConfig+0x1f0>
 8001802:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001804:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800180c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800180e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001816:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001818:	4313      	orrs	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001824:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	430a      	orrs	r2, r1
 8001830:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	00048083 	.word	0x00048083
 8001844:	c0f88000 	.word	0xc0f88000
 8001848:	fffffef0 	.word	0xfffffef0

0800184c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <ETH_SetDMAConfig+0xf8>)
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001872:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800187e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001892:	4413      	add	r3, r2
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <ETH_SetDMAConfig+0xfc>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6811      	ldr	r1, [r2, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80018a6:	440b      	add	r3, r1
 80018a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7b5b      	ldrb	r3, [r3, #13]
 80018ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <ETH_SetDMAConfig+0x100>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80018d2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018de:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	7f5b      	ldrb	r3, [r3, #29]
 80018e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f241 1304 	movw	r3, #4356	; 0x1104
 80018f2:	4413      	add	r3, r2
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <ETH_SetDMAConfig+0x104>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	431a      	orrs	r2, r3
 8001902:	f241 1304 	movw	r3, #4356	; 0x1104
 8001906:	440b      	add	r3, r1
 8001908:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001920:	4413      	add	r3, r2
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <ETH_SetDMAConfig+0x108>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6811      	ldr	r1, [r2, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	431a      	orrs	r2, r3
 8001930:	f241 1308 	movw	r3, #4360	; 0x1108
 8001934:	440b      	add	r3, r1
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	ffff87fd 	.word	0xffff87fd
 8001948:	ffff2ffe 	.word	0xffff2ffe
 800194c:	fffec000 	.word	0xfffec000
 8001950:	ffc0efef 	.word	0xffc0efef
 8001954:	7fc0ffff 	.word	0x7fc0ffff

08001958 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0a4      	sub	sp, #144	; 0x90
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001966:	2300      	movs	r3, #0
 8001968:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019d2:	2300      	movs	r3, #0
 80019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019da:	2300      	movs	r3, #0
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019f0:	2320      	movs	r3, #32
 80019f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a32:	2300      	movs	r3, #0
 8001a34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fde6 	bl	8001614 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001a78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fee1 	bl	800184c <ETH_SetDMAConfig>
}
 8001a8a:	bf00      	nop
 8001a8c:	3790      	adds	r7, #144	; 0x90
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001aae:	f001 fbf3 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8001ab2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d908      	bls.n	8001ace <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d804      	bhi.n	8001ace <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e027      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d908      	bls.n	8001ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d204      	bcs.n	8001ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e01a      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d303      	bcc.n	8001af8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d911      	bls.n	8001b1c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d908      	bls.n	8001b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d804      	bhi.n	8001b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e005      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e000      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b1c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	01312cff 	.word	0x01312cff
 8001b34:	02160ebf 	.word	0x02160ebf
 8001b38:	03938700 	.word	0x03938700
 8001b3c:	05f5e0ff 	.word	0x05f5e0ff
 8001b40:	08f0d17f 	.word	0x08f0d17f

08001b44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e01d      	b.n	8001b8e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	3206      	adds	r2, #6
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d9de      	bls.n	8001b52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f241 1314 	movw	r3, #4372	; 0x1114
 8001bb4:	4413      	add	r3, r2
 8001bb6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e024      	b.n	8001c2a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6919      	ldr	r1, [r3, #16]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3310      	adds	r3, #16
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d9d7      	bls.n	8001be0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f241 1330 	movw	r3, #4400	; 0x1130
 8001c56:	4413      	add	r3, r2
 8001c58:	2203      	movs	r2, #3
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f241 131c 	movw	r3, #4380	; 0x111c
 8001c68:	4413      	add	r3, r2
 8001c6a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f241 1328 	movw	r3, #4392	; 0x1128
 8001c7c:	4413      	add	r3, r2
 8001c7e:	6019      	str	r1, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_GPIO_Init+0x234>)
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	e194      	b.n	8001fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8186 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x44>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e0 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_GPIO_Init+0x23c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x240>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d052      	beq.n	8001ef4 <HAL_GPIO_Init+0x268>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_GPIO_Init+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_GPIO_Init+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_GPIO_Init+0x24c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_GPIO_Init+0x250>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x254>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_GPIO_Init+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_GPIO_Init+0x25c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_GPIO_Init+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_GPIO_Init+0x264>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e02d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e02b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e029      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e027      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e025      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e023      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e021      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ebe:	bf00      	nop
 8001ec0:	58000080 	.word	0x58000080
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58021400 	.word	0x58021400
 8001ee4:	58021800 	.word	0x58021800
 8001ee8:	58021c00 	.word	0x58021c00
 8001eec:	58022000 	.word	0x58022000
 8001ef0:	58022400 	.word	0x58022400
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4938      	ldr	r1, [pc, #224]	; (8001fe8 <HAL_GPIO_Init+0x35c>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae63 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3724      	adds	r7, #36	; 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002008:	e003      	b.n	8002012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_HSEM_FastTake+0x2c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3320      	adds	r3, #32
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_HSEM_FastTake+0x30>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	58026400 	.word	0x58026400
 8002050:	80000300 	.word	0x80000300

08002054 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800205e:	4906      	ldr	r1, [pc, #24]	; (8002078 <HAL_HSEM_Release+0x24>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58026400 	.word	0x58026400

0800207c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b08f      	sub	sp, #60	; 0x3c
 8002080:	af0a      	add	r7, sp, #40	; 0x28
 8002082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e116      	b.n	80022bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe ff43 	bl	8000f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fd77 	bl	8005bc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	687e      	ldr	r6, [r7, #4]
 80020da:	466d      	mov	r5, sp
 80020dc:	f106 0410 	add.w	r4, r6, #16
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f0:	1d33      	adds	r3, r6, #4
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f003 fcf5 	bl	8005ae4 <USB_CoreInit>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d7      	b.n	80022bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fd65 	bl	8005be2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e04a      	b.n	80021b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	333d      	adds	r3, #61	; 0x3d
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	333c      	adds	r3, #60	; 0x3c
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	b298      	uxth	r0, r3
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3342      	adds	r3, #66	; 0x42
 800215a:	4602      	mov	r2, r0
 800215c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	333f      	adds	r3, #63	; 0x3f
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3344      	adds	r3, #68	; 0x44
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3348      	adds	r3, #72	; 0x48
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3350      	adds	r3, #80	; 0x50
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	3301      	adds	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3af      	bcc.n	800211e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e044      	b.n	800224e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	3301      	adds	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d3b5      	bcc.n	80021c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	687e      	ldr	r6, [r7, #4]
 8002260:	466d      	mov	r5, sp
 8002262:	f106 0410 	add.w	r4, r6, #16
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002272:	e885 0003 	stmia.w	r5, {r0, r1}
 8002276:	1d33      	adds	r3, r6, #4
 8002278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	f003 fcfe 	bl	8005c7c <USB_DevInit>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e014      	b.n	80022bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f80a 	bl	80022c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 feb8 	bl	800602a <USB_DevDisconnect>

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_PCDEx_ActivateLPM+0x44>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	10000003 	.word	0x10000003

0800230c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	2b06      	cmp	r3, #6
 800231e:	d00a      	beq.n	8002336 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e040      	b.n	80023b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e03e      	b.n	80023b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800233e:	491f      	ldr	r1, [pc, #124]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4313      	orrs	r3, r2
 8002344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002346:	f7fe ff57 	bl	80011f8 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800234c:	e009      	b.n	8002362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800234e:	f7fe ff53 	bl	80011f8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800235c:	d901      	bls.n	8002362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e028      	b.n	80023b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	d1ee      	bne.n	800234e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b1e      	cmp	r3, #30
 8002374:	d008      	beq.n	8002388 <HAL_PWREx_ConfigSupply+0x7c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b2e      	cmp	r3, #46	; 0x2e
 800237a:	d005      	beq.n	8002388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b1d      	cmp	r3, #29
 8002380:	d002      	beq.n	8002388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b2d      	cmp	r3, #45	; 0x2d
 8002386:	d114      	bne.n	80023b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002388:	f7fe ff36 	bl	80011f8 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800238e:	e009      	b.n	80023a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002390:	f7fe ff32 	bl	80011f8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d901      	bls.n	80023a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_PWREx_ConfigSupply+0xb0>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d1ee      	bne.n	8002390 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	58024800 	.word	0x58024800

080023c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	58024800 	.word	0x58024800

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f000 bc1c 	b.w	8002c2c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8087 	beq.w	8002510 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002402:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800240c:	4b9b      	ldr	r3, [pc, #620]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2b10      	cmp	r3, #16
 8002416:	d007      	beq.n	8002428 <HAL_RCC_OscConfig+0x48>
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	2b18      	cmp	r3, #24
 800241c:	d110      	bne.n	8002440 <HAL_RCC_OscConfig+0x60>
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b94      	ldr	r3, [pc, #592]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d06c      	beq.n	800250e <HAL_RCC_OscConfig+0x12e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d168      	bne.n	800250e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e3f5      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x78>
 800244a:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a8b      	ldr	r2, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e02e      	b.n	80024b6 <HAL_RCC_OscConfig+0xd6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x9a>
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a85      	ldr	r2, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b83      	ldr	r3, [pc, #524]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a82      	ldr	r2, [pc, #520]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e01d      	b.n	80024b6 <HAL_RCC_OscConfig+0xd6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0xbe>
 8002484:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7c      	ldr	r2, [pc, #496]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800248a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a79      	ldr	r2, [pc, #484]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0xd6>
 800249e:	4b77      	ldr	r3, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a76      	ldr	r2, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b74      	ldr	r3, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a73      	ldr	r2, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fe9b 	bl	80011f8 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c6:	f7fe fe97 	bl	80011f8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e3a9      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0xe6>
 80024e4:	e014      	b.n	8002510 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fe87 	bl	80011f8 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ee:	f7fe fe83 	bl	80011f8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e395      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x10e>
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80ca 	beq.w	80026b2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002526:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002528:	4b54      	ldr	r3, [pc, #336]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_RCC_OscConfig+0x164>
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b18      	cmp	r3, #24
 8002538:	d156      	bne.n	80025e8 <HAL_RCC_OscConfig+0x208>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d151      	bne.n	80025e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_OscConfig+0x17c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e367      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 0219 	bic.w	r2, r3, #25
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4944      	ldr	r1, [pc, #272]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800256e:	f7fe fe43 	bl	80011f8 <HAL_GetTick>
 8002572:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe fe3f 	bl	80011f8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e351      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002588:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	f7fe fe60 	bl	8001258 <HAL_GetREVID>
 8002598:	4603      	mov	r3, r0
 800259a:	f241 0203 	movw	r2, #4099	; 0x1003
 800259e:	4293      	cmp	r3, r2
 80025a0:	d817      	bhi.n	80025d2 <HAL_RCC_OscConfig+0x1f2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x1dc>
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025b2:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ba:	e07a      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	031b      	lsls	r3, r3, #12
 80025ca:	492c      	ldr	r1, [pc, #176]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4926      	ldr	r1, [pc, #152]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e6:	e064      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d047      	beq.n	8002680 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 0219 	bic.w	r2, r3, #25
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fdf9 	bl	80011f8 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fdf5 	bl	80011f8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e307      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	f7fe fe16 	bl	8001258 <HAL_GetREVID>
 800262c:	4603      	mov	r3, r0
 800262e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002632:	4293      	cmp	r3, r2
 8002634:	d817      	bhi.n	8002666 <HAL_RCC_OscConfig+0x286>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x270>
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002646:	4a0d      	ldr	r2, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	6053      	str	r3, [r2, #4]
 800264e:	e030      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	031b      	lsls	r3, r3, #12
 800265e:	4907      	ldr	r1, [pc, #28]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	e025      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	4901      	ldr	r1, [pc, #4]	; (800267c <HAL_RCC_OscConfig+0x29c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
 800267a:	e01a      	b.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
 800267c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002680:	4b9e      	ldr	r3, [pc, #632]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a9d      	ldr	r2, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fdb4 	bl	80011f8 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fdb0 	bl	80011f8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e2c2      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a6:	4b95      	ldr	r3, [pc, #596]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a9 	beq.w	8002812 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c0:	4b8e      	ldr	r3, [pc, #568]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ca:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d007      	beq.n	80026e6 <HAL_RCC_OscConfig+0x306>
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b18      	cmp	r3, #24
 80026da:	d13a      	bne.n	8002752 <HAL_RCC_OscConfig+0x372>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d135      	bne.n	8002752 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e6:	4b85      	ldr	r3, [pc, #532]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x31e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e296      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fe:	f7fe fdab 	bl	8001258 <HAL_GetREVID>
 8002702:	4603      	mov	r3, r0
 8002704:	f241 0203 	movw	r2, #4099	; 0x1003
 8002708:	4293      	cmp	r3, r2
 800270a:	d817      	bhi.n	800273c <HAL_RCC_OscConfig+0x35c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	2b20      	cmp	r3, #32
 8002712:	d108      	bne.n	8002726 <HAL_RCC_OscConfig+0x346>
 8002714:	4b79      	ldr	r3, [pc, #484]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800271c:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800271e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002722:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002724:	e075      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	4971      	ldr	r1, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800273a:	e06a      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800273c:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	496c      	ldr	r1, [pc, #432]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002750:	e05f      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d042      	beq.n	80027e0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800275a:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a67      	ldr	r2, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fd47 	bl	80011f8 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800276e:	f7fe fd43 	bl	80011f8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e255      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002780:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800278c:	f7fe fd64 	bl	8001258 <HAL_GetREVID>
 8002790:	4603      	mov	r3, r0
 8002792:	f241 0203 	movw	r2, #4099	; 0x1003
 8002796:	4293      	cmp	r3, r2
 8002798:	d817      	bhi.n	80027ca <HAL_RCC_OscConfig+0x3ea>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d108      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3d4>
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027aa:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027b0:	6053      	str	r3, [r2, #4]
 80027b2:	e02e      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	494e      	ldr	r1, [pc, #312]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e023      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	4948      	ldr	r1, [pc, #288]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	60cb      	str	r3, [r1, #12]
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80027e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fd04 	bl	80011f8 <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027f4:	f7fe fd00 	bl	80011f8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e212      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d019      	beq.n	800285a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	4a34      	ldr	r2, [pc, #208]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fce1 	bl	80011f8 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fcdd 	bl	80011f8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1ef      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x45a>
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fcc7 	bl	80011f8 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fcc3 	bl	80011f8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1d5      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d039      	beq.n	800290c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d019      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80028a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fca4 	bl	80011f8 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028b4:	f7fe fca0 	bl	80011f8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1b2      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4d4>
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_RCC_OscConfig+0x51c>)
 80028da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fc8a 	bl	80011f8 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028e8:	f7fe fc86 	bl	80011f8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d904      	bls.n	8002900 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e198      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
 80028fa:	bf00      	nop
 80028fc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002900:	4ba3      	ldr	r3, [pc, #652]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ed      	bne.n	80028e8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8081 	beq.w	8002a1c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800291a:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <HAL_RCC_OscConfig+0x7b4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a9d      	ldr	r2, [pc, #628]	; (8002b94 <HAL_RCC_OscConfig+0x7b4>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002926:	f7fe fc67 	bl	80011f8 <HAL_GetTick>
 800292a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fc63 	bl	80011f8 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e175      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002940:	4b94      	ldr	r3, [pc, #592]	; (8002b94 <HAL_RCC_OscConfig+0x7b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x582>
 8002954:	4b8e      	ldr	r3, [pc, #568]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a8d      	ldr	r2, [pc, #564]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e02d      	b.n	80029be <HAL_RCC_OscConfig+0x5de>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x5a4>
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a88      	ldr	r2, [pc, #544]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e01c      	b.n	80029be <HAL_RCC_OscConfig+0x5de>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d10c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5c6>
 800298c:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a7f      	ldr	r2, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b7d      	ldr	r3, [pc, #500]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a7c      	ldr	r2, [pc, #496]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	e00b      	b.n	80029be <HAL_RCC_OscConfig+0x5de>
 80029a6:	4b7a      	ldr	r3, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	4b77      	ldr	r3, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a76      	ldr	r2, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d015      	beq.n	80029f2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fc17 	bl	80011f8 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fc13 	bl	80011f8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e123      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e4:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCC_OscConfig+0x5ee>
 80029f0:	e014      	b.n	8002a1c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fc01 	bl	80011f8 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fbfd 	bl	80011f8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e10d      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a10:	4b5f      	ldr	r3, [pc, #380]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ee      	bne.n	80029fa <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8102 	beq.w	8002c2a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a26:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2e:	2b18      	cmp	r3, #24
 8002a30:	f000 80bd 	beq.w	8002bae <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	f040 8095 	bne.w	8002b68 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fbd5 	bl	80011f8 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fbd1 	bl	80011f8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0e3      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_RCC_OscConfig+0x7b8>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	430a      	orrs	r2, r1
 8002a84:	4942      	ldr	r1, [pc, #264]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	628b      	str	r3, [r1, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002aba:	4935      	ldr	r1, [pc, #212]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ac0:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	4a32      	ldr	r2, [pc, #200]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCC_OscConfig+0x7bc>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ad8:	00d2      	lsls	r2, r2, #3
 8002ada:	492d      	ldr	r1, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f023 020c 	bic.w	r2, r3, #12
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4928      	ldr	r1, [pc, #160]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f023 0202 	bic.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4924      	ldr	r1, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fb5a 	bl	80011f8 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fb56 	bl	80011f8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e068      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x768>
 8002b66:	e060      	b.n	8002c2a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb40 	bl	80011f8 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7a:	e011      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fb3c 	bl	80011f8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d90a      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04e      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58024800 	.word	0x58024800
 8002b98:	fffffc0c 	.word	0xfffffc0c
 8002b9c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x854>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e7      	bne.n	8002b7c <HAL_RCC_OscConfig+0x79c>
 8002bac:	e03d      	b.n	8002c2a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_OscConfig+0x854>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <HAL_RCC_OscConfig+0x854>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d031      	beq.n	8002c26 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d12a      	bne.n	8002c26 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d122      	bne.n	8002c26 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d11a      	bne.n	8002c26 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d111      	bne.n	8002c26 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d108      	bne.n	8002c26 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0e1b      	lsrs	r3, r3, #24
 8002c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3730      	adds	r7, #48	; 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	58024400 	.word	0x58024400

08002c38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e19c      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b87      	ldr	r3, [pc, #540]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 020f 	bic.w	r2, r3, #15
 8002c62:	4985      	ldr	r1, [pc, #532]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e184      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d010      	beq.n	8002caa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d908      	bls.n	8002caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c98:	4b78      	ldr	r3, [pc, #480]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4975      	ldr	r1, [pc, #468]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	4b70      	ldr	r3, [pc, #448]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d908      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cc6:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	496a      	ldr	r1, [pc, #424]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d010      	beq.n	8002d06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d908      	bls.n	8002d06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	495e      	ldr	r1, [pc, #376]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d010      	beq.n	8002d34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d908      	bls.n	8002d34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4953      	ldr	r1, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d908      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f023 020f 	bic.w	r2, r3, #15
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4947      	ldr	r1, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d055      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4940      	ldr	r1, [pc, #256]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d88:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d121      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0f6      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d115      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0ea      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0de      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d6      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f023 0207 	bic.w	r2, r3, #7
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4925      	ldr	r1, [pc, #148]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fa05 	bl	80011f8 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df2:	f7fe fa01 	bl	80011f8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0be      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d1eb      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d208      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f023 020f 	bic.w	r2, r3, #15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d214      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	4906      	ldr	r1, [pc, #24]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_ClockConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e086      	b.n	8002f86 <HAL_RCC_ClockConfig+0x34e>
 8002e78:	52002000 	.word	0x52002000
 8002e7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d010      	beq.n	8002eae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d208      	bcs.n	8002eae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4939      	ldr	r1, [pc, #228]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d208      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	492e      	ldr	r1, [pc, #184]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d208      	bcs.n	8002f0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d208      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4917      	ldr	r1, [pc, #92]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f38:	f000 f834 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x35c>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_RCC_ClockConfig+0x35c>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x360>)
 8002f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_RCC_ClockConfig+0x364>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x368>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f8f2 	bl	8001164 <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	58024400 	.word	0x58024400
 8002f94:	0800615c 	.word	0x0800615c
 8002f98:	24000004 	.word	0x24000004
 8002f9c:	24000000 	.word	0x24000000
 8002fa0:	2400000c 	.word	0x2400000c

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002faa:	4bb3      	ldr	r3, [pc, #716]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb2:	2b18      	cmp	r3, #24
 8002fb4:	f200 8155 	bhi.w	8003262 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08003025 	.word	0x08003025
 8002fc4:	08003263 	.word	0x08003263
 8002fc8:	08003263 	.word	0x08003263
 8002fcc:	08003263 	.word	0x08003263
 8002fd0:	08003263 	.word	0x08003263
 8002fd4:	08003263 	.word	0x08003263
 8002fd8:	08003263 	.word	0x08003263
 8002fdc:	08003263 	.word	0x08003263
 8002fe0:	0800304b 	.word	0x0800304b
 8002fe4:	08003263 	.word	0x08003263
 8002fe8:	08003263 	.word	0x08003263
 8002fec:	08003263 	.word	0x08003263
 8002ff0:	08003263 	.word	0x08003263
 8002ff4:	08003263 	.word	0x08003263
 8002ff8:	08003263 	.word	0x08003263
 8002ffc:	08003263 	.word	0x08003263
 8003000:	08003051 	.word	0x08003051
 8003004:	08003263 	.word	0x08003263
 8003008:	08003263 	.word	0x08003263
 800300c:	08003263 	.word	0x08003263
 8003010:	08003263 	.word	0x08003263
 8003014:	08003263 	.word	0x08003263
 8003018:	08003263 	.word	0x08003263
 800301c:	08003263 	.word	0x08003263
 8003020:	08003057 	.word	0x08003057
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003024:	4b94      	ldr	r3, [pc, #592]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003030:	4b91      	ldr	r3, [pc, #580]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	4a90      	ldr	r2, [pc, #576]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003042:	e111      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003044:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003046:	61bb      	str	r3, [r7, #24]
    break;
 8003048:	e10e      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800304a:	4b8d      	ldr	r3, [pc, #564]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800304c:	61bb      	str	r3, [r7, #24]
    break;
 800304e:	e10b      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003052:	61bb      	str	r3, [r7, #24]
    break;
 8003054:	e108      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003056:	4b88      	ldr	r3, [pc, #544]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003060:	4b85      	ldr	r3, [pc, #532]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800306c:	4b82      	ldr	r3, [pc, #520]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003076:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	08db      	lsrs	r3, r3, #3
 800307c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80e1 	beq.w	800325c <HAL_RCC_GetSysClockFreq+0x2b8>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	f000 8083 	beq.w	80031a8 <HAL_RCC_GetSysClockFreq+0x204>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f200 80a1 	bhi.w	80031ec <HAL_RCC_GetSysClockFreq+0x248>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x114>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d056      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030b6:	e099      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02d      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	4a6b      	ldr	r2, [pc, #428]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b62      	ldr	r3, [pc, #392]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003102:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800311e:	e087      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e8>
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b51      	ldr	r3, [pc, #324]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a02 	vldr	s12, [r7, #8]
 8003146:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003162:	e065      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003176:	4b40      	ldr	r3, [pc, #256]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003186:	ed97 6a02 	vldr	s12, [r7, #8]
 800318a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003288 <HAL_RCC_GetSysClockFreq+0x2e4>
 800318e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031a6:	e043      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003288 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ea:	e021      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800322e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323a:	3301      	adds	r3, #1
 800323c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003248:	edd7 6a07 	vldr	s13, [r7, #28]
 800324c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003254:	ee17 3a90 	vmov	r3, s15
 8003258:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800325a:	e005      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    break;
 8003260:	e002      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003264:	61bb      	str	r3, [r7, #24]
    break;
 8003266:	bf00      	nop
  }

  return sysclockfreq;
 8003268:	69bb      	ldr	r3, [r7, #24]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	58024400 	.word	0x58024400
 800327c:	03d09000 	.word	0x03d09000
 8003280:	003d0900 	.word	0x003d0900
 8003284:	007a1200 	.word	0x007a1200
 8003288:	46000000 	.word	0x46000000
 800328c:	4c742400 	.word	0x4c742400
 8003290:	4a742400 	.word	0x4a742400
 8003294:	4af42400 	.word	0x4af42400

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800329e:	f7ff fe81 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490f      	ldr	r1, [pc, #60]	; (80032ec <HAL_RCC_GetHCLKFreq+0x54>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_GetHCLKFreq+0x54>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80032d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58024400 	.word	0x58024400
 80032ec:	0800615c 	.word	0x0800615c
 80032f0:	24000004 	.word	0x24000004
 80032f4:	24000000 	.word	0x24000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032fc:	f7ff ffcc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4904      	ldr	r1, [pc, #16]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	58024400 	.word	0x58024400
 8003320:	0800615c 	.word	0x0800615c

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003328:	f7ff ffb6 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCC_GetPCLK2Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	0800615c 	.word	0x0800615c

08003350 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003358:	2300      	movs	r3, #0
 800335a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800335c:	2300      	movs	r3, #0
 800335e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03f      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003374:	d02a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003376:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800337a:	d824      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800337c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003380:	d018      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003386:	d81e      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d007      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003392:	e018      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003394:	4bab      	ldr	r3, [pc, #684]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4aaa      	ldr	r2, [pc, #680]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033a0:	e015      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 f9cf 	bl	800474c <RCCEx_PLL2_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033b2:	e00c      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fa78 	bl	80048b0 <RCCEx_PLL3_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033c4:	e003      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
      break;
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033d4:	4b9b      	ldr	r3, [pc, #620]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e0:	4998      	ldr	r1, [pc, #608]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	650b      	str	r3, [r1, #80]	; 0x50
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d03d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d826      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800341d 	.word	0x0800341d
 800340c:	0800342b 	.word	0x0800342b
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003455 	.word	0x08003455
 8003418:	08003455 	.word	0x08003455
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4b89      	ldr	r3, [pc, #548]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4a88      	ldr	r2, [pc, #544]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003428:	e015      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f98b 	bl	800474c <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800343a:	e00c      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3324      	adds	r3, #36	; 0x24
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f001 fa34 	bl	80048b0 <RCCEx_PLL3_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
      break;
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	f023 0207 	bic.w	r2, r3, #7
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	4976      	ldr	r1, [pc, #472]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	650b      	str	r3, [r1, #80]	; 0x50
 800346e:	e001      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d042      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003488:	d02b      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d825      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003490:	2bc0      	cmp	r3, #192	; 0xc0
 8003492:	d028      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003494:	2bc0      	cmp	r3, #192	; 0xc0
 8003496:	d821      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d016      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d81d      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d007      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80034a8:	e018      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	4a65      	ldr	r2, [pc, #404]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034b6:	e017      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 f944 	bl	800474c <RCCEx_PLL2_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034c8:	e00e      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3324      	adds	r3, #36	; 0x24
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 f9ed 	bl	80048b0 <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034da:	e005      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034ee:	4b55      	ldr	r3, [pc, #340]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	4952      	ldr	r1, [pc, #328]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	650b      	str	r3, [r1, #80]	; 0x50
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d049      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351c:	d030      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800351e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003522:	d82a      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003528:	d02c      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800352a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800352e:	d824      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003534:	d018      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d81e      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003546:	e018      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003554:	e017      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f8f5 	bl	800474c <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003566:	e00e      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f99e 	bl	80048b0 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
      break;
 800357e:	e002      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800359a:	492a      	ldr	r1, [pc, #168]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	658b      	str	r3, [r1, #88]	; 0x58
 80035a0:	e001      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d04c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035bc:	d030      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80035be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c2:	d82a      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035c8:	d02c      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80035ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ce:	d824      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d4:	d018      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80035d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035da:	d81e      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e4:	d007      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035e6:	e018      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f4:	e017      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 f8a5 	bl	800474c <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003606:	e00e      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3324      	adds	r3, #36	; 0x24
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f94e 	bl	80048b0 <RCCEx_PLL3_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003618:	e005      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800363a:	4902      	ldr	r1, [pc, #8]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	658b      	str	r3, [r1, #88]	; 0x58
 8003640:	e004      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003642:	bf00      	nop
 8003644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d032      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	2b30      	cmp	r3, #48	; 0x30
 800365e:	d01c      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003660:	2b30      	cmp	r3, #48	; 0x30
 8003662:	d817      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d00c      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003668:	2b20      	cmp	r3, #32
 800366a:	d813      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d016      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003670:	2b10      	cmp	r3, #16
 8003672:	d10f      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4baf      	ldr	r3, [pc, #700]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4aae      	ldr	r2, [pc, #696]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003680:	e00e      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2102      	movs	r1, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f001 f85f 	bl	800474c <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800369e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036a6:	4ba3      	ldr	r3, [pc, #652]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	49a0      	ldr	r1, [pc, #640]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036b8:	e001      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d047      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d030      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d8:	d82a      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036de:	d02c      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80036e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036e4:	d824      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d018      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	d81e      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	d007      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80036fc:	e018      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4b8d      	ldr	r3, [pc, #564]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a8c      	ldr	r2, [pc, #560]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800370a:	e017      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f001 f81a 	bl	800474c <RCCEx_PLL2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800371c:	e00e      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3324      	adds	r3, #36	; 0x24
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f8c3 	bl	80048b0 <RCCEx_PLL3_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800372e:	e005      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800373a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003742:	4b7c      	ldr	r3, [pc, #496]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	4979      	ldr	r1, [pc, #484]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	650b      	str	r3, [r1, #80]	; 0x50
 8003754:	e001      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d049      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376e:	d02e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003774:	d828      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800377a:	d02a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800377c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003780:	d822      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003786:	d026      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800378c:	d81c      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800378e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003792:	d010      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003798:	d816      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01d      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a2:	d111      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 ffce 	bl	800474c <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037b4:	e012      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3324      	adds	r3, #36	; 0x24
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 f877 	bl	80048b0 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037c6:	e009      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
      break;
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037ce:	bf00      	nop
 80037d0:	e004      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	4951      	ldr	r1, [pc, #324]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	650b      	str	r3, [r1, #80]	; 0x50
 80037f4:	e001      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003810:	d02e      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003816:	d828      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d02a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d822      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003828:	d026      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800382a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800382e:	d81c      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d010      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383a:	d816      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01d      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003844:	d111      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ff7d 	bl	800474c <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003856:	e012      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f826 	bl	80048b0 <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003868:	e009      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
      break;
 800386e:	e006      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003870:	bf00      	nop
 8003872:	e004      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800387c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003892:	4928      	ldr	r1, [pc, #160]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	658b      	str	r3, [r1, #88]	; 0x58
 8003898:	e001      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d02f      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b2:	d00e      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80038b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b8:	d814      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d015      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c2:	d10f      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038d0:	e00c      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 ff37 	bl	800474c <RCCEx_PLL2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
      break;
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	650b      	str	r3, [r1, #80]	; 0x50
 8003904:	e001      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d033      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	2b03      	cmp	r3, #3
 800391c:	d81c      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	0800395f 	.word	0x0800395f
 8003928:	08003939 	.word	0x08003939
 800392c:	08003947 	.word	0x08003947
 8003930:	0800395f 	.word	0x0800395f
 8003934:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003938:	4bb8      	ldr	r3, [pc, #736]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	4ab7      	ldr	r2, [pc, #732]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800393e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003944:	e00c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2102      	movs	r1, #2
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fefd 	bl	800474c <RCCEx_PLL2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]
      break;
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800395e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003966:	4bad      	ldr	r3, [pc, #692]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	49aa      	ldr	r1, [pc, #680]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003978:	e001      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8086 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800398c:	4ba4      	ldr	r3, [pc, #656]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4aa3      	ldr	r2, [pc, #652]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003998:	f7fd fc2e 	bl	80011f8 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399e:	e009      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fd fc2a 	bl	80011f8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d902      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	75fb      	strb	r3, [r7, #23]
        break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039b4:	4b9a      	ldr	r3, [pc, #616]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ef      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d166      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039c6:	4b95      	ldr	r3, [pc, #596]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039d0:	4053      	eors	r3, r2
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039da:	4b90      	ldr	r3, [pc, #576]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039e4:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a8c      	ldr	r2, [pc, #560]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	4b8a      	ldr	r3, [pc, #552]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a89      	ldr	r2, [pc, #548]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039fc:	4a87      	ldr	r2, [pc, #540]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fbf3 	bl	80011f8 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a14:	e00b      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fd fbef 	bl	80011f8 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d902      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a2c:	e005      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ed      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d126      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003a50:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a5e:	0919      	lsrs	r1, r3, #4
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003a62:	400b      	ands	r3, r1
 8003a64:	496d      	ldr	r1, [pc, #436]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	610b      	str	r3, [r1, #16]
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003a6c:	4b6b      	ldr	r3, [pc, #428]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a76:	6113      	str	r3, [r2, #16]
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a86:	4965      	ldr	r1, [pc, #404]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	670b      	str	r3, [r1, #112]	; 0x70
 8003a8c:	e004      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	75bb      	strb	r3, [r7, #22]
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d07e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa8:	2b28      	cmp	r3, #40	; 0x28
 8003aaa:	d867      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003b83 	.word	0x08003b83
 8003ab8:	08003b7d 	.word	0x08003b7d
 8003abc:	08003b7d 	.word	0x08003b7d
 8003ac0:	08003b7d 	.word	0x08003b7d
 8003ac4:	08003b7d 	.word	0x08003b7d
 8003ac8:	08003b7d 	.word	0x08003b7d
 8003acc:	08003b7d 	.word	0x08003b7d
 8003ad0:	08003b7d 	.word	0x08003b7d
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003b7d 	.word	0x08003b7d
 8003adc:	08003b7d 	.word	0x08003b7d
 8003ae0:	08003b7d 	.word	0x08003b7d
 8003ae4:	08003b7d 	.word	0x08003b7d
 8003ae8:	08003b7d 	.word	0x08003b7d
 8003aec:	08003b7d 	.word	0x08003b7d
 8003af0:	08003b7d 	.word	0x08003b7d
 8003af4:	08003b6b 	.word	0x08003b6b
 8003af8:	08003b7d 	.word	0x08003b7d
 8003afc:	08003b7d 	.word	0x08003b7d
 8003b00:	08003b7d 	.word	0x08003b7d
 8003b04:	08003b7d 	.word	0x08003b7d
 8003b08:	08003b7d 	.word	0x08003b7d
 8003b0c:	08003b7d 	.word	0x08003b7d
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003b83 	.word	0x08003b83
 8003b18:	08003b7d 	.word	0x08003b7d
 8003b1c:	08003b7d 	.word	0x08003b7d
 8003b20:	08003b7d 	.word	0x08003b7d
 8003b24:	08003b7d 	.word	0x08003b7d
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003b7d 	.word	0x08003b7d
 8003b34:	08003b83 	.word	0x08003b83
 8003b38:	08003b7d 	.word	0x08003b7d
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003b7d 	.word	0x08003b7d
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	08003b83 	.word	0x08003b83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fdf4 	bl	800474c <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b68:	e00c      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3324      	adds	r3, #36	; 0x24
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fe9d 	bl	80048b0 <RCCEx_PLL3_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b7a:	e003      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b80:	e000      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003b9c:	e001      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03e      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d820      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bff 	.word	0x08003bff
 8003bc0:	08003bd5 	.word	0x08003bd5
 8003bc4:	08003be7 	.word	0x08003be7
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fdb6 	bl	800474c <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003be4:	e00c      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3324      	adds	r3, #36	; 0x24
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fe5f 	bl	80048b0 <RCCEx_PLL3_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfc:	e000      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d110      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	4902      	ldr	r1, [pc, #8]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	654b      	str	r3, [r1, #84]	; 0x54
 8003c18:	e008      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	58024800 	.word	0x58024800
 8003c24:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d039      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d820      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c8b 	.word	0x08003c8b
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c73 	.word	0x08003c73
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c8b 	.word	0x08003c8b
 8003c5c:	08003c8b 	.word	0x08003c8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fd70 	bl	800474c <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c70:	e00c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3324      	adds	r3, #36	; 0x24
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fe19 	bl	80048b0 <RCCEx_PLL3_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c92:	4bb7      	ldr	r3, [pc, #732]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f023 0207 	bic.w	r2, r3, #7
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	49b3      	ldr	r1, [pc, #716]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ca6:	e001      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d04b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc2:	d02e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc8:	d828      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d02a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d822      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cda:	d026      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce0:	d81c      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cec:	d816      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01d      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fd24 	bl	800474c <RCCEx_PLL2_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d08:	e012      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fdcd 	bl	80048b0 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d1a:	e009      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d20:	e006      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d22:	bf00      	nop
 8003d24:	e004      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	498a      	ldr	r1, [pc, #552]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	654b      	str	r3, [r1, #84]	; 0x54
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d66:	d02e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d6c:	d828      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d02a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	d822      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7e:	d026      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d010      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	d816      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fcd2 	bl	800474c <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003dac:	e012      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fd7b 	bl	80048b0 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de8:	4961      	ldr	r1, [pc, #388]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	658b      	str	r3, [r1, #88]	; 0x58
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e0a:	d02e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003e0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e10:	d828      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	d02a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1c:	d822      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e22:	d026      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003e24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e28:	d81c      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2e:	d010      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e34:	d816      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01d      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d111      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fc80 	bl	800474c <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e50:	e012      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fd29 	bl	80048b0 <RCCEx_PLL3_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e62:	e009      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
      break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e004      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e7e:	4b3c      	ldr	r3, [pc, #240]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8c:	4938      	ldr	r1, [pc, #224]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	658b      	str	r3, [r1, #88]	; 0x58
 8003e92:	e001      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d10a      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fcfa 	bl	80048b0 <RCCEx_PLL3_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed4:	4926      	ldr	r1, [pc, #152]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef0:	d10a      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fcd9 	bl	80048b0 <RCCEx_PLL3_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d036      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f32:	d01f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f38:	d817      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f42:	d009      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f44:	e011      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fbfd 	bl	800474c <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f56:	e00e      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fca6 	bl	80048b0 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003f70:	58024400 	.word	0x58024400
      break;
 8003f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f7c:	4b93      	ldr	r3, [pc, #588]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f8a:	4990      	ldr	r1, [pc, #576]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f90:	e001      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d033      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fac:	d01c      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003fae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fb2:	d816      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fbe:	d007      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc2:	4b82      	ldr	r3, [pc, #520]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	4a81      	ldr	r2, [pc, #516]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fce:	e00c      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3324      	adds	r3, #36	; 0x24
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fc6a 	bl	80048b0 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fe0:	e003      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ff0:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	4973      	ldr	r1, [pc, #460]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	654b      	str	r3, [r1, #84]	; 0x54
 8004004:	e001      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d029      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004022:	d007      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004024:	e00f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004026:	4b69      	ldr	r3, [pc, #420]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004032:	e00b      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fb86 	bl	800474c <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
      break;
 800404a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004052:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	495b      	ldr	r1, [pc, #364]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004064:	e001      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3324      	adds	r3, #36	; 0x24
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc17 	bl	80048b0 <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d030      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a0:	d017      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d811      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d013      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b2:	d80b      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040bc:	d106      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040be:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4a42      	ldr	r2, [pc, #264]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040ca:	e007      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	e004      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ee:	4937      	ldr	r1, [pc, #220]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	654b      	str	r3, [r1, #84]	; 0x54
 80040f4:	e001      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004106:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	492e      	ldr	r1, [pc, #184]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004124:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004132:	4926      	ldr	r1, [pc, #152]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	491e      	ldr	r1, [pc, #120]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800416c:	6113      	str	r3, [r2, #16]
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004178:	4914      	ldr	r1, [pc, #80]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da08      	bge.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	4906      	ldr	r1, [pc, #24]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80041b8:	7dbb      	ldrb	r3, [r7, #22]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	58024400 	.word	0x58024400

080041d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041d4:	f7ff f860 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58024400 	.word	0x58024400
 80041f8:	0800615c 	.word	0x0800615c

080041fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004204:	4ba1      	ldr	r3, [pc, #644]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800420e:	4b9f      	ldr	r3, [pc, #636]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	0b1b      	lsrs	r3, r3, #12
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800421a:	4b9c      	ldr	r3, [pc, #624]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004226:	4b99      	ldr	r3, [pc, #612]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8111 	beq.w	800446c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f000 8083 	beq.w	8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b02      	cmp	r3, #2
 8004256:	f200 80a1 	bhi.w	800439c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d056      	beq.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004266:	e099      	b.n	800439c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004268:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02d      	beq.n	80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004274:	4b85      	ldr	r3, [pc, #532]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a84      	ldr	r2, [pc, #528]	; (8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042ce:	e087      	b.n	80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004312:	e065      	b.n	80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800449c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004336:	ed97 6a03 	vldr	s12, [r7, #12]
 800433a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800433e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800434a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004356:	e043      	b.n	80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	4b48      	ldr	r3, [pc, #288]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437a:	ed97 6a03 	vldr	s12, [r7, #12]
 800437e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800439a:	e021      	b.n	80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800449c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043be:	ed97 6a03 	vldr	s12, [r7, #12]
 80043c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80043fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004406:	ee17 2a90 	vmov	r2, s15
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800440e:	4b1f      	ldr	r3, [pc, #124]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004428:	edd7 6a07 	vldr	s13, [r7, #28]
 800442c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 2a90 	vmov	r2, s15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004456:	edd7 6a07 	vldr	s13, [r7, #28]
 800445a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004462:	ee17 2a90 	vmov	r2, s15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800446a:	e008      	b.n	800447e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
}
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	03d09000 	.word	0x03d09000
 8004494:	46000000 	.word	0x46000000
 8004498:	4c742400 	.word	0x4c742400
 800449c:	4a742400 	.word	0x4a742400
 80044a0:	4af42400 	.word	0x4af42400

080044a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ac:	4ba1      	ldr	r3, [pc, #644]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044b6:	4b9f      	ldr	r3, [pc, #636]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	0d1b      	lsrs	r3, r3, #20
 80044bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044c2:	4b9c      	ldr	r3, [pc, #624]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044ce:	4b99      	ldr	r3, [pc, #612]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8111 	beq.w	8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f000 8083 	beq.w	8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f200 80a1 	bhi.w	8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d056      	beq.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800450e:	e099      	b.n	8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02d      	beq.n	8004578 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800451c:	4b85      	ldr	r3, [pc, #532]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	4a84      	ldr	r2, [pc, #528]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a03 	vldr	s12, [r7, #12]
 800455a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004576:	e087      	b.n	8004688 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a03 	vldr	s12, [r7, #12]
 800459e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ba:	e065      	b.n	8004688 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b59      	ldr	r3, [pc, #356]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a03 	vldr	s12, [r7, #12]
 80045e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045fe:	e043      	b.n	8004688 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b48      	ldr	r3, [pc, #288]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a03 	vldr	s12, [r7, #12]
 8004626:	eddf 5a45 	vldr	s11, [pc, #276]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004642:	e021      	b.n	8004688 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b37      	ldr	r3, [pc, #220]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a03 	vldr	s12, [r7, #12]
 800466a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004686:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004688:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800469e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ae:	ee17 2a90 	vmov	r2, s15
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046b6:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046dc:	ee17 2a90 	vmov	r2, s15
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	0e1b      	lsrs	r3, r3, #24
 80046ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470a:	ee17 2a90 	vmov	r2, s15
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004712:	e008      	b.n	8004726 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
}
 8004726:	bf00      	nop
 8004728:	3724      	adds	r7, #36	; 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	58024400 	.word	0x58024400
 8004738:	03d09000 	.word	0x03d09000
 800473c:	46000000 	.word	0x46000000
 8004740:	4c742400 	.word	0x4c742400
 8004744:	4a742400 	.word	0x4a742400
 8004748:	4af42400 	.word	0x4af42400

0800474c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800475a:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d101      	bne.n	800476a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e099      	b.n	800489e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800476a:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a4e      	ldr	r2, [pc, #312]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004776:	f7fc fd3f 	bl	80011f8 <HAL_GetTick>
 800477a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800477c:	e008      	b.n	8004790 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800477e:	f7fc fd3b 	bl	80011f8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e086      	b.n	800489e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004790:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800479c:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	493f      	ldr	r1, [pc, #252]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	628b      	str	r3, [r1, #40]	; 0x28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	3b01      	subs	r3, #1
 80047c0:	025b      	lsls	r3, r3, #9
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	3b01      	subs	r3, #1
 80047da:	061b      	lsls	r3, r3, #24
 80047dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047e0:	4931      	ldr	r1, [pc, #196]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047e6:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	492d      	ldr	r1, [pc, #180]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047f8:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f023 0220 	bic.w	r2, r3, #32
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	4928      	ldr	r1, [pc, #160]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800480a:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004810:	f023 0310 	bic.w	r3, r3, #16
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004816:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <RCCEx_PLL2_Config+0x160>)
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	69d2      	ldr	r2, [r2, #28]
 8004822:	00d2      	lsls	r2, r2, #3
 8004824:	4920      	ldr	r1, [pc, #128]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800482a:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004830:	f043 0310 	orr.w	r3, r3, #16
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004848:	e00f      	b.n	800486a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800485c:	e005      	b.n	800486a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004876:	f7fc fcbf 	bl	80011f8 <HAL_GetTick>
 800487a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800487c:	e008      	b.n	8004890 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800487e:	f7fc fcbb 	bl	80011f8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e006      	b.n	800489e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <RCCEx_PLL2_Config+0x15c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
 80048ac:	ffff0007 	.word	0xffff0007

080048b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048be:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d101      	bne.n	80048ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e099      	b.n	8004a02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048ce:	4b4f      	ldr	r3, [pc, #316]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4e      	ldr	r2, [pc, #312]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fc fc8d 	bl	80011f8 <HAL_GetTick>
 80048de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048e2:	f7fc fc89 	bl	80011f8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e086      	b.n	8004a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048f4:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004900:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	051b      	lsls	r3, r3, #20
 800490e:	493f      	ldr	r1, [pc, #252]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	628b      	str	r3, [r1, #40]	; 0x28
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	b29b      	uxth	r3, r3
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	3b01      	subs	r3, #1
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004944:	4931      	ldr	r1, [pc, #196]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	492d      	ldr	r1, [pc, #180]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800495c:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	4928      	ldr	r1, [pc, #160]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <RCCEx_PLL3_Config+0x160>)
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	69d2      	ldr	r2, [r2, #28]
 8004986:	00d2      	lsls	r2, r2, #3
 8004988:	4920      	ldr	r1, [pc, #128]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800498e:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049ac:	e00f      	b.n	80049ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c0:	e005      	b.n	80049ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fc fc0d 	bl	80011f8 <HAL_GetTick>
 80049de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049e0:	e008      	b.n	80049f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049e2:	f7fc fc09 	bl	80011f8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e006      	b.n	8004a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <RCCEx_PLL3_Config+0x15c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	ffff0007 	.word	0xffff0007

08004a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e042      	b.n	8004aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fc fa15 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2224      	movs	r2, #36	; 0x24
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f82c 	bl	8004ab4 <UART_SetConfig>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e022      	b.n	8004aac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fd80 	bl	8005574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fe07 	bl	80056b8 <UART_CheckIdleState>
 8004aaa:	4603      	mov	r3, r0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b5b0      	push	{r4, r5, r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4bbf      	ldr	r3, [pc, #764]	; (8004de0 <UART_SetConfig+0x32c>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4ab5      	ldr	r2, [pc, #724]	; (8004de4 <UART_SetConfig+0x330>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	4bb0      	ldr	r3, [pc, #704]	; (8004de8 <UART_SetConfig+0x334>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f023 010f 	bic.w	r1, r3, #15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4aa7      	ldr	r2, [pc, #668]	; (8004dec <UART_SetConfig+0x338>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d176      	bne.n	8004c40 <UART_SetConfig+0x18c>
 8004b52:	4ba7      	ldr	r3, [pc, #668]	; (8004df0 <UART_SetConfig+0x33c>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5a:	2b28      	cmp	r3, #40	; 0x28
 8004b5c:	d86c      	bhi.n	8004c38 <UART_SetConfig+0x184>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0xb0>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004c09 	.word	0x08004c09
 8004b68:	08004c39 	.word	0x08004c39
 8004b6c:	08004c39 	.word	0x08004c39
 8004b70:	08004c39 	.word	0x08004c39
 8004b74:	08004c39 	.word	0x08004c39
 8004b78:	08004c39 	.word	0x08004c39
 8004b7c:	08004c39 	.word	0x08004c39
 8004b80:	08004c39 	.word	0x08004c39
 8004b84:	08004c11 	.word	0x08004c11
 8004b88:	08004c39 	.word	0x08004c39
 8004b8c:	08004c39 	.word	0x08004c39
 8004b90:	08004c39 	.word	0x08004c39
 8004b94:	08004c39 	.word	0x08004c39
 8004b98:	08004c39 	.word	0x08004c39
 8004b9c:	08004c39 	.word	0x08004c39
 8004ba0:	08004c39 	.word	0x08004c39
 8004ba4:	08004c19 	.word	0x08004c19
 8004ba8:	08004c39 	.word	0x08004c39
 8004bac:	08004c39 	.word	0x08004c39
 8004bb0:	08004c39 	.word	0x08004c39
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004c39 	.word	0x08004c39
 8004bbc:	08004c39 	.word	0x08004c39
 8004bc0:	08004c39 	.word	0x08004c39
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c39 	.word	0x08004c39
 8004bd8:	08004c39 	.word	0x08004c39
 8004bdc:	08004c39 	.word	0x08004c39
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c39 	.word	0x08004c39
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e222      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e21e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1e:	e21a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c26:	e216      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c28:	2320      	movs	r3, #32
 8004c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2e:	e212      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c30:	2340      	movs	r3, #64	; 0x40
 8004c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c36:	e20e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c3e:	e20a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6b      	ldr	r2, [pc, #428]	; (8004df4 <UART_SetConfig+0x340>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d130      	bne.n	8004cac <UART_SetConfig+0x1f8>
 8004c4a:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <UART_SetConfig+0x33c>)
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d826      	bhi.n	8004ca4 <UART_SetConfig+0x1f0>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x1a8>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c75 	.word	0x08004c75
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c85 	.word	0x08004c85
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c7a:	e1ec      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c82:	e1e8      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c8a:	e1e4      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c92:	e1e0      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c94:	2320      	movs	r3, #32
 8004c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c9a:	e1dc      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ca2:	e1d8      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004caa:	e1d4      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a51      	ldr	r2, [pc, #324]	; (8004df8 <UART_SetConfig+0x344>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d130      	bne.n	8004d18 <UART_SetConfig+0x264>
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <UART_SetConfig+0x33c>)
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d826      	bhi.n	8004d10 <UART_SetConfig+0x25c>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x214>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004ce1 	.word	0x08004ce1
 8004ccc:	08004ce9 	.word	0x08004ce9
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce6:	e1b6      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cee:	e1b2      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf6:	e1ae      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfe:	e1aa      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d00:	2320      	movs	r3, #32
 8004d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d06:	e1a6      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d08:	2340      	movs	r3, #64	; 0x40
 8004d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0e:	e1a2      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d16:	e19e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <UART_SetConfig+0x348>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d130      	bne.n	8004d84 <UART_SetConfig+0x2d0>
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <UART_SetConfig+0x33c>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d826      	bhi.n	8004d7c <UART_SetConfig+0x2c8>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x280>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d4d 	.word	0x08004d4d
 8004d38:	08004d55 	.word	0x08004d55
 8004d3c:	08004d5d 	.word	0x08004d5d
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d52:	e180      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d54:	2304      	movs	r3, #4
 8004d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5a:	e17c      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d62:	e178      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6a:	e174      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d72:	e170      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d74:	2340      	movs	r3, #64	; 0x40
 8004d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d7a:	e16c      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d82:	e168      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <UART_SetConfig+0x34c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d142      	bne.n	8004e14 <UART_SetConfig+0x360>
 8004d8e:	4b18      	ldr	r3, [pc, #96]	; (8004df0 <UART_SetConfig+0x33c>)
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b05      	cmp	r3, #5
 8004d98:	d838      	bhi.n	8004e0c <UART_SetConfig+0x358>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x2ec>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004db9 	.word	0x08004db9
 8004da4:	08004dc1 	.word	0x08004dc1
 8004da8:	08004dc9 	.word	0x08004dc9
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dbe:	e14a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc6:	e146      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dce:	e142      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dd6:	e13e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dde:	e13a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004de0:	cfff69f3 	.word	0xcfff69f3
 8004de4:	58000c00 	.word	0x58000c00
 8004de8:	11fff4ff 	.word	0x11fff4ff
 8004dec:	40011000 	.word	0x40011000
 8004df0:	58024400 	.word	0x58024400
 8004df4:	40004400 	.word	0x40004400
 8004df8:	40004800 	.word	0x40004800
 8004dfc:	40004c00 	.word	0x40004c00
 8004e00:	40005000 	.word	0x40005000
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0a:	e124      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e12:	e120      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4acc      	ldr	r2, [pc, #816]	; (800514c <UART_SetConfig+0x698>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d176      	bne.n	8004f0c <UART_SetConfig+0x458>
 8004e1e:	4bcc      	ldr	r3, [pc, #816]	; (8005150 <UART_SetConfig+0x69c>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e26:	2b28      	cmp	r3, #40	; 0x28
 8004e28:	d86c      	bhi.n	8004f04 <UART_SetConfig+0x450>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x37c>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004ed5 	.word	0x08004ed5
 8004e34:	08004f05 	.word	0x08004f05
 8004e38:	08004f05 	.word	0x08004f05
 8004e3c:	08004f05 	.word	0x08004f05
 8004e40:	08004f05 	.word	0x08004f05
 8004e44:	08004f05 	.word	0x08004f05
 8004e48:	08004f05 	.word	0x08004f05
 8004e4c:	08004f05 	.word	0x08004f05
 8004e50:	08004edd 	.word	0x08004edd
 8004e54:	08004f05 	.word	0x08004f05
 8004e58:	08004f05 	.word	0x08004f05
 8004e5c:	08004f05 	.word	0x08004f05
 8004e60:	08004f05 	.word	0x08004f05
 8004e64:	08004f05 	.word	0x08004f05
 8004e68:	08004f05 	.word	0x08004f05
 8004e6c:	08004f05 	.word	0x08004f05
 8004e70:	08004ee5 	.word	0x08004ee5
 8004e74:	08004f05 	.word	0x08004f05
 8004e78:	08004f05 	.word	0x08004f05
 8004e7c:	08004f05 	.word	0x08004f05
 8004e80:	08004f05 	.word	0x08004f05
 8004e84:	08004f05 	.word	0x08004f05
 8004e88:	08004f05 	.word	0x08004f05
 8004e8c:	08004f05 	.word	0x08004f05
 8004e90:	08004eed 	.word	0x08004eed
 8004e94:	08004f05 	.word	0x08004f05
 8004e98:	08004f05 	.word	0x08004f05
 8004e9c:	08004f05 	.word	0x08004f05
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08004f05 	.word	0x08004f05
 8004ea8:	08004f05 	.word	0x08004f05
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004ef5 	.word	0x08004ef5
 8004eb4:	08004f05 	.word	0x08004f05
 8004eb8:	08004f05 	.word	0x08004f05
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eda:	e0bc      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004edc:	2304      	movs	r3, #4
 8004ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ee2:	e0b8      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eea:	e0b4      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004eec:	2310      	movs	r3, #16
 8004eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ef2:	e0b0      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004efa:	e0ac      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004efc:	2340      	movs	r3, #64	; 0x40
 8004efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f02:	e0a8      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f0a:	e0a4      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a90      	ldr	r2, [pc, #576]	; (8005154 <UART_SetConfig+0x6a0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d130      	bne.n	8004f78 <UART_SetConfig+0x4c4>
 8004f16:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <UART_SetConfig+0x69c>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d826      	bhi.n	8004f70 <UART_SetConfig+0x4bc>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0x474>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f41 	.word	0x08004f41
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f46:	e086      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4e:	e082      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f50:	2308      	movs	r3, #8
 8004f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f56:	e07e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5e:	e07a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f60:	2320      	movs	r3, #32
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f66:	e076      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6e:	e072      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f76:	e06e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a76      	ldr	r2, [pc, #472]	; (8005158 <UART_SetConfig+0x6a4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d130      	bne.n	8004fe4 <UART_SetConfig+0x530>
 8004f82:	4b73      	ldr	r3, [pc, #460]	; (8005150 <UART_SetConfig+0x69c>)
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d826      	bhi.n	8004fdc <UART_SetConfig+0x528>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x4e0>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fad 	.word	0x08004fad
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fbd 	.word	0x08004fbd
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb2:	e050      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e04c      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e048      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	e044      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e040      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e03c      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e038      	b.n	8005056 <UART_SetConfig+0x5a2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	; (800515c <UART_SetConfig+0x6a8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d130      	bne.n	8005050 <UART_SetConfig+0x59c>
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <UART_SetConfig+0x69c>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d826      	bhi.n	8005048 <UART_SetConfig+0x594>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x54c>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005019 	.word	0x08005019
 8005004:	08005021 	.word	0x08005021
 8005008:	08005029 	.word	0x08005029
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501e:	e01a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	e016      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	e012      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e00e      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005038:	2320      	movs	r3, #32
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e00a      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e006      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e002      	b.n	8005056 <UART_SetConfig+0x5a2>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a40      	ldr	r2, [pc, #256]	; (800515c <UART_SetConfig+0x6a8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	f040 80ef 	bne.w	8005240 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005066:	2b20      	cmp	r3, #32
 8005068:	dc46      	bgt.n	80050f8 <UART_SetConfig+0x644>
 800506a:	2b02      	cmp	r3, #2
 800506c:	f2c0 8081 	blt.w	8005172 <UART_SetConfig+0x6be>
 8005070:	3b02      	subs	r3, #2
 8005072:	2b1e      	cmp	r3, #30
 8005074:	d87d      	bhi.n	8005172 <UART_SetConfig+0x6be>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x5c8>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050ff 	.word	0x080050ff
 8005080:	08005173 	.word	0x08005173
 8005084:	08005107 	.word	0x08005107
 8005088:	08005173 	.word	0x08005173
 800508c:	08005173 	.word	0x08005173
 8005090:	08005173 	.word	0x08005173
 8005094:	08005117 	.word	0x08005117
 8005098:	08005173 	.word	0x08005173
 800509c:	08005173 	.word	0x08005173
 80050a0:	08005173 	.word	0x08005173
 80050a4:	08005173 	.word	0x08005173
 80050a8:	08005173 	.word	0x08005173
 80050ac:	08005173 	.word	0x08005173
 80050b0:	08005173 	.word	0x08005173
 80050b4:	08005127 	.word	0x08005127
 80050b8:	08005173 	.word	0x08005173
 80050bc:	08005173 	.word	0x08005173
 80050c0:	08005173 	.word	0x08005173
 80050c4:	08005173 	.word	0x08005173
 80050c8:	08005173 	.word	0x08005173
 80050cc:	08005173 	.word	0x08005173
 80050d0:	08005173 	.word	0x08005173
 80050d4:	08005173 	.word	0x08005173
 80050d8:	08005173 	.word	0x08005173
 80050dc:	08005173 	.word	0x08005173
 80050e0:	08005173 	.word	0x08005173
 80050e4:	08005173 	.word	0x08005173
 80050e8:	08005173 	.word	0x08005173
 80050ec:	08005173 	.word	0x08005173
 80050f0:	08005173 	.word	0x08005173
 80050f4:	08005165 	.word	0x08005165
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d036      	beq.n	800516a <UART_SetConfig+0x6b6>
 80050fc:	e039      	b.n	8005172 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050fe:	f7ff f867 	bl	80041d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005102:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005104:	e03b      	b.n	800517e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f876 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005114:	e033      	b.n	800517e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f9c2 	bl	80044a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005124:	e02b      	b.n	800517e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <UART_SetConfig+0x69c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005132:	4b07      	ldr	r3, [pc, #28]	; (8005150 <UART_SetConfig+0x69c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <UART_SetConfig+0x6ac>)
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005144:	e01b      	b.n	800517e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <UART_SetConfig+0x6ac>)
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800514a:	e018      	b.n	800517e <UART_SetConfig+0x6ca>
 800514c:	40011400 	.word	0x40011400
 8005150:	58024400 	.word	0x58024400
 8005154:	40007800 	.word	0x40007800
 8005158:	40007c00 	.word	0x40007c00
 800515c:	58000c00 	.word	0x58000c00
 8005160:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005164:	4bc4      	ldr	r3, [pc, #784]	; (8005478 <UART_SetConfig+0x9c4>)
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005168:	e009      	b.n	800517e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005170:	e005      	b.n	800517e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800517c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 81da 	beq.w	800553a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	4abc      	ldr	r2, [pc, #752]	; (800547c <UART_SetConfig+0x9c8>)
 800518c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005190:	461a      	mov	r2, r3
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	fbb3 f3f2 	udiv	r3, r3, r2
 8005198:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d305      	bcc.n	80051b6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d903      	bls.n	80051be <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051bc:	e1bd      	b.n	800553a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	4618      	mov	r0, r3
 80051c2:	f04f 0100 	mov.w	r1, #0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	4aac      	ldr	r2, [pc, #688]	; (800547c <UART_SetConfig+0x9c8>)
 80051cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f7fb f87f 	bl	80002d8 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	020b      	lsls	r3, r1, #8
 80051ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051f0:	0202      	lsls	r2, r0, #8
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	6849      	ldr	r1, [r1, #4]
 80051f6:	0849      	lsrs	r1, r1, #1
 80051f8:	4608      	mov	r0, r1
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	1814      	adds	r4, r2, r0
 8005200:	eb43 0501 	adc.w	r5, r3, r1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	461a      	mov	r2, r3
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb f861 	bl	80002d8 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4613      	mov	r3, r2
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005224:	d308      	bcc.n	8005238 <UART_SetConfig+0x784>
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d204      	bcs.n	8005238 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	e180      	b.n	800553a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800523e:	e17c      	b.n	800553a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	f040 80be 	bne.w	80053c8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800524c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005250:	2b20      	cmp	r3, #32
 8005252:	dc49      	bgt.n	80052e8 <UART_SetConfig+0x834>
 8005254:	2b00      	cmp	r3, #0
 8005256:	db7c      	blt.n	8005352 <UART_SetConfig+0x89e>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d87a      	bhi.n	8005352 <UART_SetConfig+0x89e>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x7b0>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052ef 	.word	0x080052ef
 8005268:	080052f7 	.word	0x080052f7
 800526c:	08005353 	.word	0x08005353
 8005270:	08005353 	.word	0x08005353
 8005274:	080052ff 	.word	0x080052ff
 8005278:	08005353 	.word	0x08005353
 800527c:	08005353 	.word	0x08005353
 8005280:	08005353 	.word	0x08005353
 8005284:	0800530f 	.word	0x0800530f
 8005288:	08005353 	.word	0x08005353
 800528c:	08005353 	.word	0x08005353
 8005290:	08005353 	.word	0x08005353
 8005294:	08005353 	.word	0x08005353
 8005298:	08005353 	.word	0x08005353
 800529c:	08005353 	.word	0x08005353
 80052a0:	08005353 	.word	0x08005353
 80052a4:	0800531f 	.word	0x0800531f
 80052a8:	08005353 	.word	0x08005353
 80052ac:	08005353 	.word	0x08005353
 80052b0:	08005353 	.word	0x08005353
 80052b4:	08005353 	.word	0x08005353
 80052b8:	08005353 	.word	0x08005353
 80052bc:	08005353 	.word	0x08005353
 80052c0:	08005353 	.word	0x08005353
 80052c4:	08005353 	.word	0x08005353
 80052c8:	08005353 	.word	0x08005353
 80052cc:	08005353 	.word	0x08005353
 80052d0:	08005353 	.word	0x08005353
 80052d4:	08005353 	.word	0x08005353
 80052d8:	08005353 	.word	0x08005353
 80052dc:	08005353 	.word	0x08005353
 80052e0:	08005353 	.word	0x08005353
 80052e4:	08005345 	.word	0x08005345
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d02e      	beq.n	800534a <UART_SetConfig+0x896>
 80052ec:	e031      	b.n	8005352 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fe f803 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 80052f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052f4:	e033      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f6:	f7fe f815 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80052fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052fc:	e02f      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe ff7a 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800530c:	e027      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f8c6 	bl	80044a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800531c:	e01f      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531e:	4b58      	ldr	r3, [pc, #352]	; (8005480 <UART_SetConfig+0x9cc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800532a:	4b55      	ldr	r3, [pc, #340]	; (8005480 <UART_SetConfig+0x9cc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	4a53      	ldr	r2, [pc, #332]	; (8005484 <UART_SetConfig+0x9d0>)
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <UART_SetConfig+0x9d0>)
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005342:	e00c      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005344:	4b4c      	ldr	r3, [pc, #304]	; (8005478 <UART_SetConfig+0x9c4>)
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ea 	beq.w	800553a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4a44      	ldr	r2, [pc, #272]	; (800547c <UART_SetConfig+0x9c8>)
 800536c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005370:	461a      	mov	r2, r3
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	005a      	lsls	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <UART_SetConfig+0x90c>
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d212      	bcs.n	80053c0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053b2:	4313      	orrs	r3, r2
 80053b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e0bc      	b.n	800553a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80053c6:	e0b8      	b.n	800553a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	dc4b      	bgt.n	8005468 <UART_SetConfig+0x9b4>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f2c0 8087 	blt.w	80054e4 <UART_SetConfig+0xa30>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f200 8084 	bhi.w	80054e4 <UART_SetConfig+0xa30>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x930>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	0800546f 	.word	0x0800546f
 80053e8:	08005489 	.word	0x08005489
 80053ec:	080054e5 	.word	0x080054e5
 80053f0:	080054e5 	.word	0x080054e5
 80053f4:	08005491 	.word	0x08005491
 80053f8:	080054e5 	.word	0x080054e5
 80053fc:	080054e5 	.word	0x080054e5
 8005400:	080054e5 	.word	0x080054e5
 8005404:	080054a1 	.word	0x080054a1
 8005408:	080054e5 	.word	0x080054e5
 800540c:	080054e5 	.word	0x080054e5
 8005410:	080054e5 	.word	0x080054e5
 8005414:	080054e5 	.word	0x080054e5
 8005418:	080054e5 	.word	0x080054e5
 800541c:	080054e5 	.word	0x080054e5
 8005420:	080054e5 	.word	0x080054e5
 8005424:	080054b1 	.word	0x080054b1
 8005428:	080054e5 	.word	0x080054e5
 800542c:	080054e5 	.word	0x080054e5
 8005430:	080054e5 	.word	0x080054e5
 8005434:	080054e5 	.word	0x080054e5
 8005438:	080054e5 	.word	0x080054e5
 800543c:	080054e5 	.word	0x080054e5
 8005440:	080054e5 	.word	0x080054e5
 8005444:	080054e5 	.word	0x080054e5
 8005448:	080054e5 	.word	0x080054e5
 800544c:	080054e5 	.word	0x080054e5
 8005450:	080054e5 	.word	0x080054e5
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054e5 	.word	0x080054e5
 800545c:	080054e5 	.word	0x080054e5
 8005460:	080054e5 	.word	0x080054e5
 8005464:	080054d7 	.word	0x080054d7
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d037      	beq.n	80054dc <UART_SetConfig+0xa28>
 800546c:	e03a      	b.n	80054e4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546e:	f7fd ff43 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005472:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005474:	e03c      	b.n	80054f0 <UART_SetConfig+0xa3c>
 8005476:	bf00      	nop
 8005478:	003d0900 	.word	0x003d0900
 800547c:	0800616c 	.word	0x0800616c
 8005480:	58024400 	.word	0x58024400
 8005484:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fd ff4c 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 800548c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800548e:	e02f      	b.n	80054f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe feb1 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549e:	e027      	b.n	80054f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fffd 	bl	80044a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ae:	e01f      	b.n	80054f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b0:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <UART_SetConfig+0xab0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <UART_SetConfig+0xab0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	4a28      	ldr	r2, [pc, #160]	; (8005568 <UART_SetConfig+0xab4>)
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054ce:	e00f      	b.n	80054f0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <UART_SetConfig+0xab4>)
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d4:	e00c      	b.n	80054f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054d6:	4b25      	ldr	r3, [pc, #148]	; (800556c <UART_SetConfig+0xab8>)
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054da:	e009      	b.n	80054f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e2:	e005      	b.n	80054f0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80054ee:	bf00      	nop
    }

    if (pclk != 0U)
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d021      	beq.n	800553a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <UART_SetConfig+0xabc>)
 80054fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005500:	461a      	mov	r2, r3
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	fbb3 f2f2 	udiv	r2, r3, r2
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	2b0f      	cmp	r3, #15
 800551e:	d909      	bls.n	8005534 <UART_SetConfig+0xa80>
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005526:	d205      	bcs.n	8005534 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	e002      	b.n	800553a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005556:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800555a:	4618      	mov	r0, r3
 800555c:	3738      	adds	r7, #56	; 0x38
 800555e:	46bd      	mov	sp, r7
 8005560:	bdb0      	pop	{r4, r5, r7, pc}
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	03d09000 	.word	0x03d09000
 800556c:	003d0900 	.word	0x003d0900
 8005570:	0800616c 	.word	0x0800616c

08005574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01a      	beq.n	800568a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005672:	d10a      	bne.n	800568a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c8:	f7fb fd96 	bl	80011f8 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d10e      	bne.n	80056fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f82f 	bl	800574e <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e025      	b.n	8005746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d10e      	bne.n	8005726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f819 	bl	800574e <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e00f      	b.n	8005746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b09c      	sub	sp, #112	; 0x70
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4613      	mov	r3, r2
 800575c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575e:	e0a9      	b.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	f000 80a5 	beq.w	80058b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576a:	f7fb fd45 	bl	80011f8 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <UART_WaitOnFlagUntilTimeout+0x32>
 800577a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577c:	2b00      	cmp	r3, #0
 800577e:	d140      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800578e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005794:	667b      	str	r3, [r7, #100]	; 0x64
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3308      	adds	r3, #8
 80057d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e069      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d051      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800581a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581e:	d149      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005828:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800583e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	613b      	str	r3, [r7, #16]
   return(result);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	66bb      	str	r3, [r7, #104]	; 0x68
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800587c:	623a      	str	r2, [r7, #32]
 800587e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	69f9      	ldr	r1, [r7, #28]
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	61bb      	str	r3, [r7, #24]
   return(result);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e010      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	f43f af46 	beq.w	8005760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3770      	adds	r7, #112	; 0x70
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e027      	b.n	8005944 <HAL_UARTEx_DisableFifoMode+0x66>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005922:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e02d      	b.n	80059c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2224      	movs	r2, #36	; 0x24
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f84f 	bl	8005a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e02d      	b.n	8005a40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2224      	movs	r2, #36	; 0x24
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f811 	bl	8005a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d108      	bne.n	8005a6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a68:	e031      	b.n	8005ace <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a6e:	2310      	movs	r3, #16
 8005a70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	0e5b      	lsrs	r3, r3, #25
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	0f5b      	lsrs	r3, r3, #29
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	7b3a      	ldrb	r2, [r7, #12]
 8005a96:	4911      	ldr	r1, [pc, #68]	; (8005adc <UARTEx_SetNbDataToProcess+0x94>)
 8005a98:	5c8a      	ldrb	r2, [r1, r2]
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a9e:	7b3a      	ldrb	r2, [r7, #12]
 8005aa0:	490f      	ldr	r1, [pc, #60]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	7b7a      	ldrb	r2, [r7, #13]
 8005ab4:	4909      	ldr	r1, [pc, #36]	; (8005adc <UARTEx_SetNbDataToProcess+0x94>)
 8005ab6:	5c8a      	ldrb	r2, [r1, r2]
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005abc:	7b7a      	ldrb	r2, [r7, #13]
 8005abe:	4908      	ldr	r1, [pc, #32]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	08006184 	.word	0x08006184
 8005ae0:	0800618c 	.word	0x0800618c

08005ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	f107 001c 	add.w	r0, r7, #28
 8005af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d120      	bne.n	8005b3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <USB_CoreInit+0xd4>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 faa8 	bl	8006088 <USB_CoreReset>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e01a      	b.n	8005b74 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa9c 	bl	8006088 <USB_CoreReset>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
 8005b66:	e005      	b.n	8005b74 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d116      	bne.n	8005ba8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <USB_CoreInit+0xd8>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f043 0206 	orr.w	r2, r3, #6
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb4:	b004      	add	sp, #16
 8005bb6:	4770      	bx	lr
 8005bb8:	ffbdffbf 	.word	0xffbdffbf
 8005bbc:	03ee0000 	.word	0x03ee0000

08005bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 0201 	bic.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d115      	bne.n	8005c30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7fb fafd 	bl	8001210 <HAL_Delay>
      ms++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa25 	bl	800606c <USB_GetMode>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d01e      	beq.n	8005c66 <USB_SetCurrentMode+0x84>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b31      	cmp	r3, #49	; 0x31
 8005c2c:	d9f0      	bls.n	8005c10 <USB_SetCurrentMode+0x2e>
 8005c2e:	e01a      	b.n	8005c66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d115      	bne.n	8005c62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c42:	2001      	movs	r0, #1
 8005c44:	f7fb fae4 	bl	8001210 <HAL_Delay>
      ms++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa0c 	bl	800606c <USB_GetMode>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <USB_SetCurrentMode+0x84>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b31      	cmp	r3, #49	; 0x31
 8005c5e:	d9f0      	bls.n	8005c42 <USB_SetCurrentMode+0x60>
 8005c60:	e001      	b.n	8005c66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e005      	b.n	8005c72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b32      	cmp	r3, #50	; 0x32
 8005c6a:	d101      	bne.n	8005c70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	e009      	b.n	8005cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3340      	adds	r3, #64	; 0x40
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b0e      	cmp	r3, #14
 8005cb4:	d9f2      	bls.n	8005c9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11c      	bne.n	8005cf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	e005      	b.n	8005d02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	4619      	mov	r1, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	680b      	ldr	r3, [r1, #0]
 8005d20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10c      	bne.n	8005d42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f961 	bl	8005ff8 <USB_SetDevSpeed>
 8005d36:	e008      	b.n	8005d4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f95c 	bl	8005ff8 <USB_SetDevSpeed>
 8005d40:	e003      	b.n	8005d4a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d42:	2103      	movs	r1, #3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f957 	bl	8005ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f8f3 	bl	8005f38 <USB_FlushTxFifo>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f91d 	bl	8005f9c <USB_FlushRxFifo>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	461a      	mov	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	e043      	b.n	8005e1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dac:	d118      	bne.n	8005de0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	e013      	b.n	8005df2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e008      	b.n	8005df2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	461a      	mov	r2, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2300      	movs	r3, #0
 8005e02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	461a      	mov	r2, r3
 8005e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d3b7      	bcc.n	8005d96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	e043      	b.n	8005eb4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e42:	d118      	bne.n	8005e76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	461a      	mov	r2, r3
 8005e58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e013      	b.n	8005e88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e008      	b.n	8005e88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	2300      	movs	r3, #0
 8005e86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d3b7      	bcc.n	8005e2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ece:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005edc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f043 0210 	orr.w	r2, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <USB_DevInit+0x2b4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f043 0208 	orr.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <USB_DevInit+0x2b8>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr
 8005f30:	803c3800 	.word	0x803c3800
 8005f34:	40000004 	.word	0x40000004

08005f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <USB_FlushTxFifo+0x60>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e01a      	b.n	8005f8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	daf3      	bge.n	8005f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3301      	adds	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <USB_FlushTxFifo+0x60>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e006      	b.n	8005f8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d0f1      	beq.n	8005f6e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	00030d40 	.word	0x00030d40

08005f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <USB_FlushRxFifo+0x58>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e017      	b.n	8005fe8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	daf3      	bge.n	8005fa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <USB_FlushRxFifo+0x58>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e006      	b.n	8005fe8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d0f1      	beq.n	8005fca <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	00030d40 	.word	0x00030d40

08005ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0301 	and.w	r3, r3, #1
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <USB_CoreReset+0x60>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e01a      	b.n	80060da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	daf3      	bge.n	8006094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f043 0201 	orr.w	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <USB_CoreReset+0x60>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d901      	bls.n	80060cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e006      	b.n	80060da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d0f1      	beq.n	80060bc <USB_CoreReset+0x34>

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	00030d40 	.word	0x00030d40

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f820 	bl	8006144 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	0800619c 	.word	0x0800619c
 8006128:	0800619c 	.word	0x0800619c
 800612c:	0800619c 	.word	0x0800619c
 8006130:	080061a0 	.word	0x080061a0

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
